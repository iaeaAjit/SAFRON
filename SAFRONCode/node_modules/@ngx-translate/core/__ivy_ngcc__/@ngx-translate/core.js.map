{"version":3,"file":"core.js","sources":["~/@ngx-translate/core/src/translate.loader.ts","../../../src/util/isScheduler.ts","../../../src/util/root.ts","../../../src/util/isFunction.ts","../../../src/util/isArray.ts","../../../src/util/isObject.ts","../../../src/util/errorObject.ts","../../../src/util/tryCatch.ts","../../../src/util/UnsubscriptionError.ts","../../../src/Subscription.ts","../../../src/Observer.ts","../../../src/symbol/rxSubscriber.ts","../../../src/Subscriber.ts","../../../src/util/toSubscriber.ts","../../../src/symbol/observable.ts","../../../src/util/noop.ts","../../../src/util/pipe.ts","../../../src/Observable.ts","../../../src/observable/ScalarObservable.ts","../../../src/observable/EmptyObservable.ts","../../../src/observable/ArrayObservable.ts","../../../src/observable/of.ts","../../../src/util/isArrayLike.ts","../../../src/util/isPromise.ts","../../../src/observable/PromiseObservable.ts","../../../src/symbol/iterator.ts","../../../src/observable/IteratorObservable.ts","../../../src/observable/ArrayLikeObservable.ts","../../../src/Notification.ts","../../../src/operators/observeOn.ts","../../../src/observable/FromObservable.ts","../../../src/observable/from.ts","../../../src/InnerSubscriber.ts","../../../src/util/subscribeToResult.ts","../../../src/OuterSubscriber.ts","../../../src/operators/mergeMap.ts","../../../src/util/identity.ts","../../../src/operators/mergeAll.ts","../../../src/operators/concatAll.ts","../../../src/observable/concat.ts","../../../src/operators/concat.ts","~/@ngx-translate/core/src/missing-translation-handler.ts","~/@ngx-translate/core/src/translate.compiler.ts","~/@ngx-translate/core/src/util.ts","~/@ngx-translate/core/src/translate.parser.ts","~/@ngx-translate/core/src/translate.store.ts","~/@ngx-translate/core/src/translate.service.ts","~/@ngx-translate/core/src/translate.directive.ts","~/@ngx-translate/core/src/translate.pipe.ts","~/@ngx-translate/core/index.ts","~/@ngx-translate/core/core.ts"],"names":["of","__decorate","global","errorObject_1","__extends","isArray_1","root_1","Observer_1","rxSubscriber_1","Observable","observable","observable_1","root","iterator","iterator_1","isArrayLike_1","concat","from_1","of_1","isObject","take","share","merge","toArray","map","switchMap","__metadata"],"mappings":"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","sourcesContent":["import {Observable} from \"rxjs/Observable\";\nimport {Injectable} from \"@angular/core\";\nimport {of} from \"rxjs/observable/of\";\n\nexport abstract class TranslateLoader {\n    abstract getTranslation(lang: string): Observable<any>;\n}\n\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\n@Injectable()\nexport class TranslateFakeLoader extends TranslateLoader {\n    getTranslation(lang: string): Observable<any> {\n        return of({});\n    }\n}\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(): Subscription;\n  subscribe(observer: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","export function identity<T>(x: T): T {\n  return x;\n}\n","\nimport { ObservableInput } from '../Observable';\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): MonoTypeOperatorFunction<T> {\n  return mergeMap(identity as (value: T, index: number) => ObservableInput<{}>, null, concurrent);\n}","\nimport { mergeAll } from './mergeAll';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): MonoTypeOperatorFunction<T> {\n  return mergeAll(1);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: (ObservableInput<T> | IScheduler)[]): Observable<T>;\nexport function concat<T, R>(...observables: (ObservableInput<any> | IScheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n    return from(<any>observables[0]);\n  }\n  return concatAll()(of(...observables)) as Observable<R>;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { concat as concatStatic } from '../observable/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function concat<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function concat<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: Array<ObservableInput<T> | IScheduler>): MonoTypeOperatorFunction<T>;\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(concatStatic<T, R>(source, ...observables));\n}\n","import {TranslateService} from \"./translate.service\";\nimport {Injectable} from \"@angular/core\";\n\nexport interface MissingTranslationHandlerParams {\n    /**\n     * the key that's missing in translation files\n     *\n     * @type {string}\n     */\n    key: string;\n\n    /**\n     * an instance of the service that was unable to translate the key.\n     *\n     * @type {TranslateService}\n     */\n    translateService: TranslateService;\n\n    /**\n     * interpolation params that were passed along for translating the given key.\n     *\n     * @type {Object}\n     */\n    interpolateParams?: Object;\n}\n\nexport abstract class MissingTranslationHandler {\n    /**\n     * A function that handles missing translations.\n     *\n     * @abstract\n     * @param {MissingTranslationHandlerParams} params context for resolving a missing translation\n     * @returns {any} a value or an observable\n     * If it returns a value, then this value is used.\n     * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\n     * If it doesn't return then the key will be used as a value\n     */\n    abstract handle(params: MissingTranslationHandlerParams): any;\n}\n\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\n@Injectable()\nexport class FakeMissingTranslationHandler implements MissingTranslationHandler {\n    handle(params: MissingTranslationHandlerParams): string {\n        return params.key;\n    }\n}\n","import {Injectable} from \"@angular/core\";\n\nexport abstract class TranslateCompiler {\n    abstract compile(value: string, lang: string): string | Function;\n    abstract compileTranslations(translations: any, lang: string): any;\n}\n\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\n@Injectable()\nexport class TranslateFakeCompiler extends TranslateCompiler {\n    compile(value: string, lang: string): string | Function {\n        return value;\n    }\n\n    compileTranslations(translations: any, lang: string): any {\n        return translations;\n    }\n}\n","/* tslint:disable */\n/**\n * @name equals\n *\n * @description\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param {*} o1 Object or value to compare.\n * @param {*} o2 Object or value to compare.\n * @returns {boolean} True if arguments are equal.\n */\nexport function equals(o1: any, o2: any): boolean {\n    if (o1 === o2) return true;\n    if (o1 === null || o2 === null) return false;\n    if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n    let t1 = typeof o1, t2 = typeof o2, length: number, key: any, keySet: any;\n    if (t1 == t2 && t1 == 'object') {\n        if (Array.isArray(o1)) {\n            if (!Array.isArray(o2)) return false;\n            if ((length = o1.length) == o2.length) {\n                for (key = 0; key < length; key++) {\n                    if (!equals(o1[key], o2[key])) return false;\n                }\n                return true;\n            }\n        } else {\n            if (Array.isArray(o2)) {\n                return false;\n            }\n            keySet = Object.create(null);\n            for (key in o1) {\n                if (!equals(o1[key], o2[key])) {\n                    return false;\n                }\n                keySet[key] = true;\n            }\n            for (key in o2) {\n                if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}\n/* tslint:enable */\n\nexport function isDefined(value: any): boolean {\n    return typeof value !== 'undefined' && value !== null;\n}\n\nexport function isObject(item: any): boolean {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\nexport function mergeDeep(target: any, source: any): any {\n    let output = Object.assign({}, target);\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach((key: any) => {\n            if (isObject(source[key])) {\n                if (!(key in target)) {\n                    Object.assign(output, { [key]: source[key] });\n                } else {\n                    output[key] = mergeDeep(target[key], source[key]);\n                }\n            } else {\n                Object.assign(output, { [key]: source[key] });\n            }\n        });\n    }\n    return output;\n}\n","import {Injectable} from \"@angular/core\";\nimport {isDefined} from \"./util\";\n\nexport abstract class TranslateParser {\n    /**\n     * Interpolates a string to replace parameters\n     * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\n     * @param expr\n     * @param params\n     * @returns {string}\n     */\n    abstract interpolate(expr: string | Function, params?: any): string;\n\n    /**\n     * Gets a value from an object by composed key\n     * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n     * @param target\n     * @param key\n     * @returns {string}\n     */\n    abstract getValue(target: any, key: string): any\n}\n\n@Injectable()\nexport class TranslateDefaultParser extends TranslateParser {\n    templateMatcher: RegExp = /{{\\s?([^{}\\s]*)\\s?}}/g;\n\n    public interpolate(expr: string | Function, params?: any): string {\n        let result: string;\n\n        if(typeof expr === 'string') {\n            result = this.interpolateString(expr, params);\n        } else if(typeof expr === 'function') {\n            result =  this.interpolateFunction(expr, params);\n        } else {\n            // this should not happen, but an unrelated TranslateService test depends on it\n            result = expr as string;\n        }\n\n        return result;\n    }\n\n    getValue(target: any, key: string): any {\n        let keys = key.split('.');\n        key = '';\n        do {\n            key += keys.shift();\n            if(isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n                target = target[key];\n                key = '';\n            } else if(!keys.length) {\n                target = undefined;\n            } else {\n                key += '.';\n            }\n        } while(keys.length);\n\n        return target;\n    }\n\n    private interpolateFunction(fn: Function, params?: any) {\n        return fn(params);\n    }\n\n    private interpolateString(expr: string, params?: any) {\n        if (!params) {\n            return expr;\n        }\n\n        return expr.replace(this.templateMatcher, (substring: string, b: string) => {\n            let r = this.getValue(params, b);\n            return isDefined(r) ? r : substring;\n        });\n    }\n}\n","import {EventEmitter} from \"@angular/core\";\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslationChangeEvent} from \"./translate.service\";\n\nexport class TranslateStore {\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     */\n    public defaultLang: string;\n\n    /**\n     * The lang currently used\n     * @type {string}\n     */\n    public currentLang: string = this.defaultLang;\n\n    /**\n     * a list of translations per lang\n     * @type {{}}\n     */\n    public translations: any = {};\n\n    /**\n     * an array of langs\n     * @type {Array}\n     */\n    public langs: Array<string> = [];\n\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<TranslationChangeEvent>}\n     */\n    public onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<LangChangeEvent>}\n     */\n    public onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<DefaultLangChangeEvent>}\n     */\n    public onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n}\n","import {EventEmitter, Inject, Injectable, InjectionToken} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Observer} from \"rxjs/Observer\";\nimport {concat} from \"rxjs/operators/concat\";\nimport {share} from \"rxjs/operators/share\";\nimport {map} from \"rxjs/operators/map\";\nimport {merge} from \"rxjs/operators/merge\";\nimport {switchMap} from \"rxjs/operators/switchMap\";\nimport {toArray} from \"rxjs/operators/toArray\";\nimport {take} from \"rxjs/operators/take\";\nimport {of} from \"rxjs/observable/of\";\nimport {\n  MissingTranslationHandler,\n  MissingTranslationHandlerParams\n} from \"./missing-translation-handler\";\nimport {TranslateCompiler} from \"./translate.compiler\";\nimport {TranslateLoader} from \"./translate.loader\";\nimport {TranslateParser} from \"./translate.parser\";\n\nimport {TranslateStore} from \"./translate.store\";\nimport {isDefined, mergeDeep} from \"./util\";\n\nexport const USE_STORE = new InjectionToken<string>('USE_STORE');\nexport const USE_DEFAULT_LANG = new InjectionToken<string>('USE_DEFAULT_LANG');\n\nexport interface TranslationChangeEvent {\n    translations: any;\n    lang: string;\n}\n\nexport interface LangChangeEvent {\n    lang: string;\n    translations: any;\n}\n\nexport interface DefaultLangChangeEvent {\n    lang: string;\n    translations: any;\n}\n\ndeclare interface Window {\n    navigator: any;\n}\ndeclare const window: Window;\n\n@Injectable()\nexport class TranslateService {\n    private loadingTranslations: Observable<any>;\n    private pending: boolean = false;\n    private _onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n    private _onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n    private _onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n    private _defaultLang: string;\n    private _currentLang: string;\n    private _langs: Array<string> = [];\n    private _translations: any = {};\n    private _translationRequests: any  = {};\n\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<TranslationChangeEvent>}\n     */\n    get onTranslationChange(): EventEmitter<TranslationChangeEvent> {\n        return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n    }\n\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<LangChangeEvent>}\n     */\n    get onLangChange(): EventEmitter<LangChangeEvent> {\n        return this.isolate ? this._onLangChange : this.store.onLangChange;\n    }\n\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<DefaultLangChangeEvent>}\n     */\n    get onDefaultLangChange() {\n        return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n    }\n\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     */\n    get defaultLang(): string {\n        return this.isolate ? this._defaultLang : this.store.defaultLang;\n    }\n\n    set defaultLang(defaultLang: string) {\n        if(this.isolate) {\n            this._defaultLang = defaultLang;\n        } else {\n            this.store.defaultLang = defaultLang;\n        }\n    }\n\n    /**\n     * The lang currently used\n     * @type {string}\n     */\n    get currentLang(): string {\n        return this.isolate ? this._currentLang : this.store.currentLang;\n    }\n\n    set currentLang(currentLang: string) {\n        if(this.isolate) {\n            this._currentLang = currentLang;\n        } else {\n            this.store.currentLang = currentLang;\n        }\n    }\n\n    /**\n     * an array of langs\n     * @type {Array}\n     */\n    get langs(): string[] {\n        return this.isolate ? this._langs : this.store.langs;\n    }\n\n    set langs(langs: string[]) {\n        if(this.isolate) {\n            this._langs = langs;\n        } else {\n            this.store.langs = langs;\n        }\n    }\n\n    /**\n     * a list of translations per lang\n     * @type {{}}\n     */\n    get translations(): any {\n        return this.isolate ? this._translations : this.store.translations;\n    }\n\n    set translations(translations: any) {\n        if(this.isolate) {\n            this._translations = translations;\n        } else {\n            this.store.translations = translations;\n        }\n    }\n\n    /**\n     *\n     * @param store an instance of the store (that is supposed to be unique)\n     * @param currentLoader An instance of the loader currently used\n     * @param compiler An instance of the compiler currently used\n     * @param parser An instance of the parser currently used\n     * @param missingTranslationHandler A handler for missing translations.\n     * @param isolate whether this service should use the store or not\n     * @param useDefaultLang whether we should use default language translation when current language translation is missing.\n     */\n    constructor(public store: TranslateStore,\n                public currentLoader: TranslateLoader,\n                public compiler: TranslateCompiler,\n                public parser: TranslateParser,\n                public missingTranslationHandler: MissingTranslationHandler,\n                @Inject(USE_DEFAULT_LANG) private useDefaultLang: boolean = true,\n                @Inject(USE_STORE) private isolate: boolean = false) {\n    }\n\n    /**\n     * Sets the default language to use as a fallback\n     * @param lang\n     */\n    public setDefaultLang(lang: string): void {\n        if(lang === this.defaultLang) {\n            return;\n        }\n\n        let pending: Observable<any> = this.retrieveTranslations(lang);\n\n        if(typeof pending !== \"undefined\") {\n            // on init set the defaultLang immediately\n            if(!this.defaultLang) {\n                this.defaultLang = lang;\n            }\n\n            pending.pipe(take(1))\n                .subscribe((res: any) => {\n                    this.changeDefaultLang(lang);\n                });\n        } else { // we already have this language\n            this.changeDefaultLang(lang);\n        }\n    }\n\n    /**\n     * Gets the default language used\n     * @returns string\n     */\n    public getDefaultLang(): string {\n        return this.defaultLang;\n    }\n\n    /**\n     * Changes the lang currently used\n     * @param lang\n     * @returns {Observable<*>}\n     */\n    public use(lang: string): Observable<any> {\n        // don't change the language if the language given is already selected\n        if(lang === this.currentLang) {\n            return of(this.translations[lang]);\n        }\n\n        let pending: Observable<any> = this.retrieveTranslations(lang);\n\n        if(typeof pending !== \"undefined\") {\n            // on init set the currentLang immediately\n            if(!this.currentLang) {\n                this.currentLang = lang;\n            }\n\n            pending.pipe(take(1))\n                .subscribe((res: any) => {\n                    this.changeLang(lang);\n                });\n\n            return pending;\n        } else { // we have this language, return an Observable\n            this.changeLang(lang);\n\n            return of(this.translations[lang]);\n        }\n    }\n\n    /**\n     * Retrieves the given translations\n     * @param lang\n     * @returns {Observable<*>}\n     */\n    private retrieveTranslations(lang: string): Observable<any> {\n        let pending: Observable<any>;\n\n        // if this language is unavailable, ask for it\n        if(typeof this.translations[lang] === \"undefined\") {\n            this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n            pending = this._translationRequests[lang];\n        }\n\n        return pending;\n    }\n\n    /**\n     * Gets an object of translations for a given language with the current loader\n     * and passes it through the compiler\n     * @param lang\n     * @returns {Observable<*>}\n     */\n    public getTranslation(lang: string): Observable<any> {\n        this.pending = true;\n        this.loadingTranslations = this.currentLoader.getTranslation(lang).pipe(share());\n\n        this.loadingTranslations.pipe(take(1))\n          .subscribe((res: Object) => {\n                this.translations[lang] = this.compiler.compileTranslations(res, lang);\n                this.updateLangs();\n                this.pending = false;\n            }, (err: any) => {\n                this.pending = false;\n            });\n\n        return this.loadingTranslations;\n    }\n\n    /**\n     * Manually sets an object of translations for a given language\n     * after passing it through the compiler\n     * @param lang\n     * @param translations\n     * @param shouldMerge\n     */\n    public setTranslation(lang: string, translations: Object, shouldMerge: boolean = false): void {\n        translations = this.compiler.compileTranslations(translations, lang);\n        if(shouldMerge && this.translations[lang]) {\n            this.translations[lang] = mergeDeep(this.translations[lang], translations);\n        } else {\n            this.translations[lang] = translations;\n        }\n        this.updateLangs();\n        this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n    }\n\n    /**\n     * Returns an array of currently available langs\n     * @returns {any}\n     */\n    public getLangs(): Array<string> {\n        return this.langs;\n    }\n\n    /**\n     * @param langs\n     * Add available langs\n     */\n    public addLangs(langs: Array<string>): void {\n        langs.forEach((lang: string) => {\n            if(this.langs.indexOf(lang) === -1) {\n                this.langs.push(lang);\n            }\n        });\n    }\n\n    /**\n     * Update the list of available langs\n     */\n    private updateLangs(): void {\n        this.addLangs(Object.keys(this.translations));\n    }\n\n    /**\n     * Returns the parsed result of the translations\n     * @param translations\n     * @param key\n     * @param interpolateParams\n     * @returns {any}\n     */\n    public getParsedResult(translations: any, key: any, interpolateParams?: Object): any {\n        let res: string | Observable<string>;\n\n        if(key instanceof Array) {\n            let result: any = {},\n                observables: boolean = false;\n            for(let k of key) {\n                result[k] = this.getParsedResult(translations, k, interpolateParams);\n                if(typeof result[k].subscribe === \"function\") {\n                    observables = true;\n                }\n            }\n            if(observables) {\n                let mergedObs: Observable<string>;\n                for(let k of key) {\n                    let obs = typeof result[k].subscribe === \"function\" ? result[k] : of(result[k] as string);\n                    if(typeof mergedObs === \"undefined\") {\n                        mergedObs = obs;\n                    } else {\n                        mergedObs = mergedObs.pipe(merge(obs));\n                    }\n                }\n                return mergedObs.pipe(\n                  toArray(),\n                  map((arr: Array<string>) => {\n                    let obj: any = {};\n                    arr.forEach((value: string, index: number) => {\n                      obj[key[index]] = value;\n                    });\n                    return obj;\n                  })\n                );\n            }\n            return result;\n        }\n\n        if(translations) {\n            res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n        }\n\n        if(typeof res === \"undefined\" && this.defaultLang && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n            res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n        }\n\n        if(typeof res === \"undefined\") {\n            let params: MissingTranslationHandlerParams = {key, translateService: this};\n            if(typeof interpolateParams !== 'undefined') {\n                params.interpolateParams = interpolateParams;\n            }\n            res = this.missingTranslationHandler.handle(params);\n        }\n\n        return typeof res !== \"undefined\" ? res : key;\n    }\n\n    /**\n     * Gets the translated value of a key (or an array of keys)\n     * @param key\n     * @param interpolateParams\n     * @returns {any} the translated key, or an object of translated keys\n     */\n    public get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n        if(!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        // check if we are loading a new translation to use\n        if(this.pending) {\n            return Observable.create((observer: Observer<string>) => {\n                let onComplete = (res: string) => {\n                    observer.next(res);\n                    observer.complete();\n                };\n                let onError = (err: any) => {\n                    observer.error(err);\n                };\n                this.loadingTranslations.subscribe((res: any) => {\n                    res = this.getParsedResult(this.compiler.compileTranslations(res, this.currentLang), key, interpolateParams);\n                    if(typeof res.subscribe === \"function\") {\n                        res.subscribe(onComplete, onError);\n                    } else {\n                        onComplete(res);\n                    }\n                }, onError);\n            });\n        } else {\n            let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n            if(typeof res.subscribe === \"function\") {\n                return res;\n            } else {\n                return of(res);\n            }\n        }\n    }\n\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the language changes.\n     * @param key\n     * @param interpolateParams\n     * @returns {any} A stream of the translated key, or an object of translated keys\n     */\n    public stream(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n        if(!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n\n        return this\n          .get(key, interpolateParams)\n          .pipe(\n            concat(this.onLangChange.pipe(\n              switchMap((event: LangChangeEvent) => {\n                const res = this.getParsedResult(event.translations, key, interpolateParams);\n                if (typeof res.subscribe === \"function\") {\n                  return res;\n                } else {\n                  return of(res);\n                }\n              })\n            ))\n          );\n    }\n\n    /**\n     * Returns a translation instantly from the internal state of loaded translation.\n     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n     * @param key\n     * @param interpolateParams\n     * @returns {string}\n     */\n    public instant(key: string | Array<string>, interpolateParams?: Object): string | any {\n        if(!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n\n        let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n        if(typeof res.subscribe !== \"undefined\") {\n            if(key instanceof Array) {\n                let obj: any = {};\n                key.forEach((value: string, index: number) => {\n                    obj[key[index]] = key[index];\n                });\n                return obj;\n            }\n            return key;\n        } else {\n            return res;\n        }\n    }\n\n    /**\n     * Sets the translated value of a key, after compiling it\n     * @param key\n     * @param value\n     * @param lang\n     */\n    public set(key: string, value: string, lang: string = this.currentLang): void {\n        this.translations[lang][key] = this.compiler.compile(value, lang);\n        this.updateLangs();\n        this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n    }\n\n    /**\n     * Changes the current lang\n     * @param lang\n     */\n    private changeLang(lang: string): void {\n        this.currentLang = lang;\n        this.onLangChange.emit({lang: lang, translations: this.translations[lang]});\n\n        // if there is no default lang, use the one that we just set\n        if(!this.defaultLang) {\n            this.changeDefaultLang(lang);\n        }\n    }\n\n    /**\n     * Changes the default lang\n     * @param lang\n     */\n    private changeDefaultLang(lang: string): void {\n        this.defaultLang = lang;\n        this.onDefaultLangChange.emit({lang: lang, translations: this.translations[lang]});\n    }\n\n    /**\n     * Allows to reload the lang file from the file\n     * @param lang\n     * @returns {Observable<any>}\n     */\n    public reloadLang(lang: string): Observable<any> {\n        this.resetLang(lang);\n        return this.getTranslation(lang);\n    }\n\n    /**\n     * Deletes inner translation\n     * @param lang\n     */\n    public resetLang(lang: string): void {\n        this._translationRequests[lang] = undefined;\n        this.translations[lang] = undefined;\n    }\n\n    /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     *\n     * @returns string\n     */\n    public getBrowserLang(): string {\n        if(typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n\n        let browserLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n        if(browserLang.indexOf('-') !== -1) {\n            browserLang = browserLang.split('-')[0];\n        }\n\n        if(browserLang.indexOf('_') !== -1) {\n            browserLang = browserLang.split('_')[0];\n        }\n\n        return browserLang;\n    }\n\n    /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     *\n     * @returns string\n     */\n    public getBrowserCultureLang(): string {\n        if(typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n\n        let browserCultureLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n        return browserCultureLang;\n    }\n}\n","import {Directive, ElementRef, AfterViewChecked, Input, OnDestroy, ChangeDetectorRef} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {equals, isDefined} from './util';\nimport {TranslateService, LangChangeEvent} from './translate.service';\nimport {TranslationChangeEvent} from \"./translate.service\";\nimport {DefaultLangChangeEvent} from \"./translate.service\";\n\n@Directive({\n    selector: '[translate],[ngx-translate]'\n})\nexport class TranslateDirective implements AfterViewChecked, OnDestroy {\n    key: string;\n    lastParams: any;\n    currentParams: any;\n    onLangChangeSub: Subscription;\n    onDefaultLangChangeSub: Subscription;\n    onTranslationChangeSub: Subscription;\n\n    @Input() set translate(key: string) {\n        if(key) {\n            this.key = key;\n            this.checkNodes();\n        }\n    }\n\n    @Input() set translateParams(params: any) {\n        if(!equals(this.currentParams, params)) {\n            this.currentParams = params;\n            this.checkNodes(true);\n        }\n    }\n\n    constructor(private translateService: TranslateService, private element: ElementRef, private _ref: ChangeDetectorRef) {\n        // subscribe to onTranslationChange event, in case the translations of the current lang change\n        if(!this.onTranslationChangeSub) {\n            this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n                if(event.lang === this.translateService.currentLang) {\n                    this.checkNodes(true, event.translations);\n                }\n            });\n        }\n\n        // subscribe to onLangChange event, in case the language changes\n        if(!this.onLangChangeSub) {\n            this.onLangChangeSub = this.translateService.onLangChange.subscribe((event: LangChangeEvent) => {\n                this.checkNodes(true, event.translations);\n            });\n        }\n\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if(!this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((event: DefaultLangChangeEvent) => {\n                this.checkNodes(true);\n            });\n        }\n    }\n\n    ngAfterViewChecked() {\n        this.checkNodes();\n    }\n\n    checkNodes(forceUpdate = false, translations?: any) {\n        let nodes: NodeList = this.element.nativeElement.childNodes;\n        // if the element is empty\n        if(!nodes.length) {\n            // we add the key as content\n            this.setContent(this.element.nativeElement, this.key);\n            nodes = this.element.nativeElement.childNodes;\n        }\n        for(let i = 0; i < nodes.length; ++i) {\n            let node: any = nodes[i];\n            if(node.nodeType === 3) { // node type 3 is a text node\n                let key: string;\n                if(this.key) {\n                    key = this.key;\n                    if(forceUpdate) {\n                        node.lastKey = null;\n                    }\n                } else {\n                    let content = this.getContent(node).trim();\n                    if(content.length) {\n                        // we want to use the content as a key, not the translation value\n                        if(content !== node.currentValue) {\n                            key = content;\n                            // the content was changed from the user, we'll use it as a reference if needed\n                            node.originalContent = this.getContent(node);\n                        } else if(node.originalContent && forceUpdate) { // the content seems ok, but the lang has changed\n                            node.lastKey = null;\n                            // the current content is the translation, not the key, use the last real content as key\n                            key = node.originalContent.trim();\n                        }\n                    }\n                }\n                this.updateValue(key, node, translations);\n            }\n        }\n    }\n\n    updateValue(key: string, node: any, translations: any) {\n        if(key) {\n            if(node.lastKey === key && this.lastParams === this.currentParams) {\n                return;\n            }\n\n            this.lastParams = this.currentParams;\n\n            let onTranslation = (res: string) => {\n                if(res !== key) {\n                    node.lastKey = key;\n                }\n                if(!node.originalContent) {\n                    node.originalContent = this.getContent(node);\n                }\n                node.currentValue = isDefined(res) ? res : (node.originalContent || key);\n                // we replace in the original content to preserve spaces that we might have trimmed\n                this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n                this._ref.markForCheck();\n            };\n\n            if(isDefined(translations)) {\n                let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n                if(typeof res.subscribe === \"function\") {\n                    res.subscribe(onTranslation);\n                } else {\n                    onTranslation(res);\n                }\n            } else {\n                this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n            }\n        }\n    }\n\n    getContent(node: any): string {\n        return isDefined(node.textContent) ? node.textContent : node.data;\n    }\n\n    setContent(node: any, content: string): void {\n        if(isDefined(node.textContent)) {\n            node.textContent = content;\n        } else {\n            node.data = content;\n        }\n    }\n\n    ngOnDestroy() {\n        if(this.onLangChangeSub) {\n            this.onLangChangeSub.unsubscribe();\n        }\n\n        if(this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub.unsubscribe();\n        }\n\n        if(this.onTranslationChangeSub) {\n            this.onTranslationChangeSub.unsubscribe();\n        }\n    }\n}\n","import {PipeTransform, Pipe, Injectable, EventEmitter, OnDestroy, ChangeDetectorRef} from '@angular/core';\nimport {TranslateService, LangChangeEvent, TranslationChangeEvent, DefaultLangChangeEvent} from './translate.service';\nimport {equals, isDefined} from './util';\n\n@Injectable()\n@Pipe({\n    name: 'translate',\n    pure: false // required to update the value when the promise is resolved\n})\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n    value: string = '';\n    lastKey: string;\n    lastParams: any[];\n    onTranslationChange: EventEmitter<TranslationChangeEvent>;\n    onLangChange: EventEmitter<LangChangeEvent>;\n    onDefaultLangChange: EventEmitter<DefaultLangChangeEvent>;\n\n    constructor(private translate: TranslateService, private _ref: ChangeDetectorRef) {\n    }\n\n    updateValue(key: string, interpolateParams?: Object, translations?: any): void {\n        let onTranslation = (res: string) => {\n            this.value = res !== undefined ? res : key;\n            this.lastKey = key;\n            this._ref.markForCheck();\n        };\n        if(translations) {\n            let res = this.translate.getParsedResult(translations, key, interpolateParams);\n            if(typeof res.subscribe === 'function') {\n                res.subscribe(onTranslation);\n            } else {\n                onTranslation(res);\n            }\n        }\n        this.translate.get(key, interpolateParams).subscribe(onTranslation);\n    }\n\n    transform(query: string, ...args: any[]): any {\n        if(!query || query.length === 0) {\n            return query;\n        }\n\n        // if we ask another time for the same key, return the last value\n        if(equals(query, this.lastKey) && equals(args, this.lastParams)) {\n            return this.value;\n        }\n\n        let interpolateParams: Object;\n        if(isDefined(args[0]) && args.length) {\n            if(typeof args[0] === 'string' && args[0].length) {\n                // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n                // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n                let validArgs: string = args[0]\n                    .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\n                    .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n                try {\n                    interpolateParams = JSON.parse(validArgs);\n                } catch(e) {\n                    throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n                }\n            } else if(typeof args[0] === 'object' && !Array.isArray(args[0])) {\n                interpolateParams = args[0];\n            }\n        }\n\n        // store the query, in case it changes\n        this.lastKey = query;\n\n        // store the params, in case they change\n        this.lastParams = args;\n\n        // set the value\n        this.updateValue(query, interpolateParams);\n\n        // if there is a subscription to onLangChange, clean it\n        this._dispose();\n\n        // subscribe to onTranslationChange event, in case the translations change\n        if(!this.onTranslationChange) {\n            this.onTranslationChange = this.translate.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n                if(this.lastKey && event.lang === this.translate.currentLang) {\n                    this.lastKey = null;\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n\n        // subscribe to onLangChange event, in case the language changes\n        if(!this.onLangChange) {\n            this.onLangChange = this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\n                if(this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if(!this.onDefaultLangChange) {\n            this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n                if(this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams);\n                }\n            });\n        }\n\n        return this.value;\n    }\n\n    /**\n     * Clean any existing subscription to change events\n     * @private\n     */\n    _dispose(): void {\n        if(typeof this.onTranslationChange !== 'undefined') {\n            this.onTranslationChange.unsubscribe();\n            this.onTranslationChange = undefined;\n        }\n        if(typeof this.onLangChange !== 'undefined') {\n            this.onLangChange.unsubscribe();\n            this.onLangChange = undefined;\n        }\n        if(typeof this.onDefaultLangChange !== 'undefined') {\n            this.onDefaultLangChange.unsubscribe();\n            this.onDefaultLangChange = undefined;\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._dispose();\n    }\n}\n","import {NgModule, ModuleWithProviders, Provider} from \"@angular/core\";\nimport {TranslateLoader, TranslateFakeLoader} from \"./src/translate.loader\";\nimport {TranslateService} from \"./src/translate.service\";\nimport {MissingTranslationHandler, FakeMissingTranslationHandler} from \"./src/missing-translation-handler\";\nimport {TranslateParser, TranslateDefaultParser} from \"./src/translate.parser\";\nimport {TranslateCompiler, TranslateFakeCompiler} from \"./src/translate.compiler\";\nimport {TranslateDirective} from \"./src/translate.directive\";\nimport {TranslatePipe} from \"./src/translate.pipe\";\nimport {TranslateStore} from \"./src/translate.store\";\nimport {USE_STORE} from \"./src/translate.service\";\nimport {USE_DEFAULT_LANG} from \"./src/translate.service\";\n\nexport * from \"./src/translate.loader\";\nexport * from \"./src/translate.service\";\nexport * from \"./src/missing-translation-handler\";\nexport * from \"./src/translate.parser\";\nexport * from \"./src/translate.compiler\";\nexport * from \"./src/translate.directive\";\nexport * from \"./src/translate.pipe\";\n\nexport interface TranslateModuleConfig {\n    loader?: Provider;\n    compiler?: Provider;\n    parser?: Provider;\n    missingTranslationHandler?: Provider;\n    // isolate the service instance, only works for lazy loaded modules or components with the \"providers\" property\n    isolate?: boolean;\n    useDefaultLang?: boolean;\n}\n\n@NgModule({\n    declarations: [\n        TranslatePipe,\n        TranslateDirective\n    ],\n    exports: [\n        TranslatePipe,\n        TranslateDirective\n    ]\n})\nexport class TranslateModule {\n    /**\n     * Use this method in your root module to provide the TranslateService\n     * @param {TranslateModuleConfig} config\n     * @returns {ModuleWithProviders}\n     */\n    static forRoot(config: TranslateModuleConfig = {}): ModuleWithProviders {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n                config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n                config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n                config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n                TranslateStore,\n                {provide: USE_STORE, useValue: config.isolate},\n                {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n                TranslateService\n            ]\n        };\n    }\n\n    /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     * @param {TranslateModuleConfig} config\n     * @returns {ModuleWithProviders}\n     */\n    static forChild(config: TranslateModuleConfig = {}): ModuleWithProviders {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n                config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n                config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n                config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n                {provide: USE_STORE, useValue: config.isolate},\n                {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n                TranslateService\n            ]\n        };\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {TranslateStore as ɵa} from './src/translate.store';"]}