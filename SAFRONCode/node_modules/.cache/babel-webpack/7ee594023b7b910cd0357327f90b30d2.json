{"ast":null,"code":"import { ChangeDetectorRef, Directive, ElementRef, EventEmitter, Inject, Injectable, InjectionToken, Input, NgModule, Pipe } from '@angular/core';\nimport { of as of$1 } from 'rxjs/observable/of';\nimport { Observable as Observable$1 } from 'rxjs/Observable';\nimport { share as share$1 } from 'rxjs/operators/share';\nimport { map as map$1 } from 'rxjs/operators/map';\nimport { merge as merge$1 } from 'rxjs/operators/merge';\nimport { switchMap as switchMap$1 } from 'rxjs/operators/switchMap';\nimport { toArray as toArray$1 } from 'rxjs/operators/toArray';\nimport { take as take$1 } from 'rxjs/operators/take';\nimport * as ɵngcc0 from '@angular/core';\n\nvar __decorate$1 = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nclass TranslateLoader {}\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\n\n\nlet TranslateFakeLoader = class TranslateFakeLoader extends TranslateLoader {\n  getTranslation(lang) {\n    return of$1({});\n  }\n\n};\n\nTranslateFakeLoader.ɵfac = /*@__PURE__*/function () {\n  let ɵTranslateFakeLoader_BaseFactory;\n  return function TranslateFakeLoader_Factory(t) {\n    return (ɵTranslateFakeLoader_BaseFactory || (ɵTranslateFakeLoader_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TranslateFakeLoader)))(t || TranslateFakeLoader);\n  };\n}();\n\nTranslateFakeLoader.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: TranslateFakeLoader,\n  factory: function (t) {\n    return TranslateFakeLoader.ɵfac(t);\n  }\n});\n\nfunction isScheduler(value) {\n  return value && typeof value.schedule === 'function';\n}\n\nvar isScheduler_2 = isScheduler;\nvar isScheduler_1 = {\n  isScheduler: isScheduler_2\n};\nvar commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n} // CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\n\nvar __window = typeof window !== 'undefined' && window;\n\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self;\n\nvar __global = typeof commonjsGlobal !== 'undefined' && commonjsGlobal;\n\nvar _root = __window || __global || __self;\n\nvar root_1 = _root; // Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nvar root = {\n  root: root_1\n};\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\nvar isFunction_2 = isFunction;\nvar isFunction_1 = {\n  isFunction: isFunction_2\n};\n\nvar isArray_1 = Array.isArray || function (x) {\n  return x && typeof x.length === 'number';\n};\n\nvar isArray = {\n  isArray: isArray_1\n};\n\nfunction isObject(x) {\n  return x != null && typeof x === 'object';\n}\n\nvar isObject_2 = isObject;\nvar isObject_1 = {\n  isObject: isObject_2\n}; // typeof any so that it we don't have to cast when comparing a result to the error object\n\nvar errorObject_1 = {\n  e: {}\n};\nvar errorObject = {\n  errorObject: errorObject_1\n};\nvar tryCatchTarget;\n\nfunction tryCatcher() {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.errorObject.e = e;\n    return errorObject.errorObject;\n  }\n}\n\nfunction tryCatch(fn) {\n  tryCatchTarget = fn;\n  return tryCatcher;\n}\n\nvar tryCatch_2 = tryCatch;\nvar tryCatch_1 = {\n  tryCatch: tryCatch_2\n};\n\nvar __extends$2 = commonjsGlobal && commonjsGlobal.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\n\n\nvar UnsubscriptionError = function (_super) {\n  __extends$2(UnsubscriptionError, _super);\n\n  function UnsubscriptionError(errors) {\n    _super.call(this);\n\n    this.errors = errors;\n    var err = Error.call(this, errors ? errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) {\n      return i + 1 + \") \" + err.toString();\n    }).join('\\n  ') : '');\n    this.name = err.name = 'UnsubscriptionError';\n    this.stack = err.stack;\n    this.message = err.message;\n  }\n\n  return UnsubscriptionError;\n}(Error);\n\nvar UnsubscriptionError_2 = UnsubscriptionError;\nvar UnsubscriptionError_1 = {\n  UnsubscriptionError: UnsubscriptionError_2\n};\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\n\nvar Subscription = function () {\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  function Subscription(unsubscribe) {\n    /**\n     * A flag to indicate whether this Subscription has already been unsubscribed.\n     * @type {boolean}\n     */\n    this.closed = false;\n    this._parent = null;\n    this._parents = null;\n    this._subscriptions = null;\n\n    if (unsubscribe) {\n      this._unsubscribe = unsubscribe;\n    }\n  }\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n\n\n  Subscription.prototype.unsubscribe = function () {\n    var hasErrors = false;\n    var errors;\n\n    if (this.closed) {\n      return;\n    }\n\n    var _a = this,\n        _parent = _a._parent,\n        _parents = _a._parents,\n        _unsubscribe = _a._unsubscribe,\n        _subscriptions = _a._subscriptions;\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null; // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n\n    this._subscriptions = null;\n    var index = -1;\n    var len = _parents ? _parents.length : 0; // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n\n    while (_parent) {\n      _parent.remove(this); // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n\n\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction_1.isFunction(_unsubscribe)) {\n      var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n\n      if (trial === errorObject.errorObject) {\n        hasErrors = true;\n        errors = errors || (errorObject.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ? flattenUnsubscriptionErrors(errorObject.errorObject.e.errors) : [errorObject.errorObject.e]);\n      }\n    }\n\n    if (isArray.isArray(_subscriptions)) {\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        var sub = _subscriptions[index];\n\n        if (isObject_1.isObject(sub)) {\n          var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n\n          if (trial === errorObject.errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            var err = errorObject.errorObject.e;\n\n            if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n    }\n  };\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n\n\n  Subscription.prototype.add = function (teardown) {\n    if (!teardown || teardown === Subscription.EMPTY) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    var subscription = teardown;\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(teardown);\n\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function'\n        /* quack quack */\n        ) {\n          var tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n\n        break;\n\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    var subscriptions = this._subscriptions || (this._subscriptions = []);\n    subscriptions.push(subscription);\n\n    subscription._addParent(this);\n\n    return subscription;\n  };\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n\n\n  Subscription.prototype.remove = function (subscription) {\n    var subscriptions = this._subscriptions;\n\n    if (subscriptions) {\n      var subscriptionIndex = subscriptions.indexOf(subscription);\n\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  };\n\n  Subscription.prototype._addParent = function (parent) {\n    var _a = this,\n        _parent = _a._parent,\n        _parents = _a._parents;\n\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  };\n\n  Subscription.EMPTY = function (empty) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription());\n\n  return Subscription;\n}();\n\nvar Subscription_2 = Subscription;\n\nfunction flattenUnsubscriptionErrors(errors) {\n  return errors.reduce(function (errs, err) {\n    return errs.concat(err instanceof UnsubscriptionError_1.UnsubscriptionError ? err.errors : err);\n  }, []);\n}\n\nvar Subscription_1 = {\n  Subscription: Subscription_2\n};\nvar empty = {\n  closed: true,\n  next: function (value) {},\n  error: function (err) {\n    throw err;\n  },\n  complete: function () {}\n};\nvar Observer = {\n  empty: empty\n};\nvar rxSubscriber = createCommonjsModule(function (module, exports) {\n  var Symbol = root.root.Symbol;\n  exports.rxSubscriber = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('rxSubscriber') : '@@rxSubscriber';\n  /**\n   * @deprecated use rxSubscriber instead\n   */\n\n  exports.$$rxSubscriber = exports.rxSubscriber;\n});\nvar rxSubscriber_1 = rxSubscriber.rxSubscriber;\nvar rxSubscriber_2 = rxSubscriber.$$rxSubscriber;\n\nvar __extends$1 = commonjsGlobal && commonjsGlobal.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\n\n\nvar Subscriber = function (_super) {\n  __extends$1(Subscriber, _super);\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n\n\n  function Subscriber(destinationOrNext, error, complete) {\n    _super.call(this);\n\n    this.syncErrorValue = null;\n    this.syncErrorThrown = false;\n    this.syncErrorThrowable = false;\n    this.isStopped = false;\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = Observer.empty;\n        break;\n\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = Observer.empty;\n          break;\n        }\n\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = destinationOrNext;\n            this.destination.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber(this, destinationOrNext);\n          }\n\n          break;\n        }\n\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  Subscriber.prototype[rxSubscriber.rxSubscriber] = function () {\n    return this;\n  };\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n\n\n  Subscriber.create = function (next, error, complete) {\n    var subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  };\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n\n\n  Subscriber.prototype.next = function (value) {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  };\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n\n\n  Subscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      this.isStopped = true;\n\n      this._error(err);\n    }\n  };\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n\n\n  Subscriber.prototype.complete = function () {\n    if (!this.isStopped) {\n      this.isStopped = true;\n\n      this._complete();\n    }\n  };\n\n  Subscriber.prototype.unsubscribe = function () {\n    if (this.closed) {\n      return;\n    }\n\n    this.isStopped = true;\n\n    _super.prototype.unsubscribe.call(this);\n  };\n\n  Subscriber.prototype._next = function (value) {\n    this.destination.next(value);\n  };\n\n  Subscriber.prototype._error = function (err) {\n    this.destination.error(err);\n    this.unsubscribe();\n  };\n\n  Subscriber.prototype._complete = function () {\n    this.destination.complete();\n    this.unsubscribe();\n  };\n\n  Subscriber.prototype._unsubscribeAndRecycle = function () {\n    var _a = this,\n        _parent = _a._parent,\n        _parents = _a._parents;\n\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  };\n\n  return Subscriber;\n}(Subscription_1.Subscription);\n\nvar Subscriber_2 = Subscriber;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nvar SafeSubscriber = function (_super) {\n  __extends$1(SafeSubscriber, _super);\n\n  function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n    _super.call(this);\n\n    this._parentSubscriber = _parentSubscriber;\n    var next;\n    var context = this;\n\n    if (isFunction_1.isFunction(observerOrNext)) {\n      next = observerOrNext;\n    } else if (observerOrNext) {\n      next = observerOrNext.next;\n      error = observerOrNext.error;\n      complete = observerOrNext.complete;\n\n      if (observerOrNext !== Observer.empty) {\n        context = Object.create(observerOrNext);\n\n        if (isFunction_1.isFunction(context.unsubscribe)) {\n          this.add(context.unsubscribe.bind(context));\n        }\n\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  SafeSubscriber.prototype.next = function (value) {\n    if (!this.isStopped && this._next) {\n      var _parentSubscriber = this._parentSubscriber;\n\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var _parentSubscriber = this._parentSubscriber;\n\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.complete = function () {\n    var _this = this;\n\n    if (!this.isStopped) {\n      var _parentSubscriber = this._parentSubscriber;\n\n      if (this._complete) {\n        var wrappedComplete = function () {\n          return _this._complete.call(_this._context);\n        };\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  };\n\n  SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n\n    return false;\n  };\n\n  SafeSubscriber.prototype._unsubscribe = function () {\n    var _parentSubscriber = this._parentSubscriber;\n    this._context = null;\n    this._parentSubscriber = null;\n\n    _parentSubscriber.unsubscribe();\n  };\n\n  return SafeSubscriber;\n}(Subscriber);\n\nvar Subscriber_1 = {\n  Subscriber: Subscriber_2\n};\n\nfunction toSubscriber(nextOrObserver, error, complete) {\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n      return nextOrObserver;\n    }\n\n    if (nextOrObserver[rxSubscriber.rxSubscriber]) {\n      return nextOrObserver[rxSubscriber.rxSubscriber]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber_1.Subscriber(Observer.empty);\n  }\n\n  return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n}\n\nvar toSubscriber_2 = toSubscriber;\nvar toSubscriber_1 = {\n  toSubscriber: toSubscriber_2\n};\nvar observable = createCommonjsModule(function (module, exports) {\n  function getSymbolObservable(context) {\n    var $$observable;\n    var Symbol = context.Symbol;\n\n    if (typeof Symbol === 'function') {\n      if (Symbol.observable) {\n        $$observable = Symbol.observable;\n      } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n      }\n    } else {\n      $$observable = '@@observable';\n    }\n\n    return $$observable;\n  }\n\n  exports.getSymbolObservable = getSymbolObservable;\n  exports.observable = getSymbolObservable(root.root);\n  /**\n   * @deprecated use observable instead\n   */\n\n  exports.$$observable = exports.observable;\n});\nvar observable_1 = observable.getSymbolObservable;\nvar observable_2 = observable.observable;\nvar observable_3 = observable.$$observable;\n/* tslint:disable:no-empty */\n\nfunction noop() {}\n\nvar noop_2 = noop;\nvar noop_1 = {\n  noop: noop_2\n};\n/* tslint:enable:max-line-length */\n\nfunction pipe() {\n  var fns = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    fns[_i - 0] = arguments[_i];\n  }\n\n  return pipeFromArray(fns);\n}\n\nvar pipe_2 = pipe;\n/* @internal */\n\nfunction pipeFromArray(fns) {\n  if (!fns) {\n    return noop_1.noop;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input) {\n    return fns.reduce(function (prev, fn) {\n      return fn(prev);\n    }, input);\n  };\n}\n\nvar pipeFromArray_1 = pipeFromArray;\nvar pipe_1 = {\n  pipe: pipe_2,\n  pipeFromArray: pipeFromArray_1\n};\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\n\nvar Observable$2 = function () {\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  function Observable$$1(subscribe) {\n    this._isScalar = false;\n\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n\n\n  Observable$$1.prototype.lift = function (operator) {\n    var observable$$1 = new Observable$$1();\n    observable$$1.source = this;\n    observable$$1.operator = operator;\n    return observable$$1;\n  };\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n\n\n  Observable$$1.prototype.subscribe = function (observerOrNext, error, complete) {\n    var operator = this.operator;\n    var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  };\n\n  Observable$$1.prototype._trySubscribe = function (sink) {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  };\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n\n\n  Observable$$1.prototype.forEach = function (next, PromiseCtor) {\n    var _this = this;\n\n    if (!PromiseCtor) {\n      if (root.root.Rx && root.root.Rx.config && root.root.Rx.config.Promise) {\n        PromiseCtor = root.root.Rx.config.Promise;\n      } else if (root.root.Promise) {\n        PromiseCtor = root.root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor(function (resolve, reject) {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      var subscription;\n      subscription = _this.subscribe(function (value) {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  };\n\n  Observable$$1.prototype._subscribe = function (subscriber) {\n    return this.source.subscribe(subscriber);\n  };\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n\n\n  Observable$$1.prototype[observable.observable] = function () {\n    return this;\n  };\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n\n\n  Observable$$1.prototype.pipe = function () {\n    var operations = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      operations[_i - 0] = arguments[_i];\n    }\n\n    if (operations.length === 0) {\n      return this;\n    }\n\n    return pipe_1.pipeFromArray(operations)(this);\n  };\n  /* tslint:enable:max-line-length */\n\n\n  Observable$$1.prototype.toPromise = function (PromiseCtor) {\n    var _this = this;\n\n    if (!PromiseCtor) {\n      if (root.root.Rx && root.root.Rx.config && root.root.Rx.config.Promise) {\n        PromiseCtor = root.root.Rx.config.Promise;\n      } else if (root.root.Promise) {\n        PromiseCtor = root.root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor(function (resolve, reject) {\n      var value;\n\n      _this.subscribe(function (x) {\n        return value = x;\n      }, function (err) {\n        return reject(err);\n      }, function () {\n        return resolve(value);\n      });\n    });\n  }; // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n\n\n  Observable$$1.create = function (subscribe) {\n    return new Observable$$1(subscribe);\n  };\n\n  return Observable$$1;\n}();\n\nvar Observable_2 = Observable$2;\nvar Observable_1 = {\n  Observable: Observable_2\n};\n\nvar __extends$3 = commonjsGlobal && commonjsGlobal.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\n\n\nvar ScalarObservable = function (_super) {\n  __extends$3(ScalarObservable, _super);\n\n  function ScalarObservable(value, scheduler) {\n    _super.call(this);\n\n    this.value = value;\n    this.scheduler = scheduler;\n    this._isScalar = true;\n\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  ScalarObservable.create = function (value, scheduler) {\n    return new ScalarObservable(value, scheduler);\n  };\n\n  ScalarObservable.dispatch = function (state) {\n    var done = state.done,\n        value = state.value,\n        subscriber = state.subscriber;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    this.schedule(state);\n  };\n\n  ScalarObservable.prototype._subscribe = function (subscriber) {\n    var value = this.value;\n    var scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false,\n        value: value,\n        subscriber: subscriber\n      });\n    } else {\n      subscriber.next(value);\n\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  };\n\n  return ScalarObservable;\n}(Observable_1.Observable);\n\nvar ScalarObservable_2 = ScalarObservable;\nvar ScalarObservable_1 = {\n  ScalarObservable: ScalarObservable_2\n};\n\nvar __extends$4 = commonjsGlobal && commonjsGlobal.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\n\n\nvar EmptyObservable = function (_super) {\n  __extends$4(EmptyObservable, _super);\n\n  function EmptyObservable(scheduler) {\n    _super.call(this);\n\n    this.scheduler = scheduler;\n  }\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n\n\n  EmptyObservable.create = function (scheduler) {\n    return new EmptyObservable(scheduler);\n  };\n\n  EmptyObservable.dispatch = function (arg) {\n    var subscriber = arg.subscriber;\n    subscriber.complete();\n  };\n\n  EmptyObservable.prototype._subscribe = function (subscriber) {\n    var scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, {\n        subscriber: subscriber\n      });\n    } else {\n      subscriber.complete();\n    }\n  };\n\n  return EmptyObservable;\n}(Observable_1.Observable);\n\nvar EmptyObservable_2 = EmptyObservable;\nvar EmptyObservable_1 = {\n  EmptyObservable: EmptyObservable_2\n};\n\nvar __extends = commonjsGlobal && commonjsGlobal.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\n\n\nvar ArrayObservable = function (_super) {\n  __extends(ArrayObservable, _super);\n\n  function ArrayObservable(array, scheduler) {\n    _super.call(this);\n\n    this.array = array;\n    this.scheduler = scheduler;\n\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  ArrayObservable.create = function (array, scheduler) {\n    return new ArrayObservable(array, scheduler);\n  };\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n\n\n  ArrayObservable.of = function () {\n    var array = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      array[_i - 0] = arguments[_i];\n    }\n\n    var scheduler = array[array.length - 1];\n\n    if (isScheduler_1.isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    var len = array.length;\n\n    if (len > 1) {\n      return new ArrayObservable(array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable_1.ScalarObservable(array[0], scheduler);\n    } else {\n      return new EmptyObservable_1.EmptyObservable(scheduler);\n    }\n  };\n\n  ArrayObservable.dispatch = function (state) {\n    var array = state.array,\n        index = state.index,\n        count = state.count,\n        subscriber = state.subscriber;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    this.schedule(state);\n  };\n\n  ArrayObservable.prototype._subscribe = function (subscriber) {\n    var index = 0;\n    var array = this.array;\n    var count = array.length;\n    var scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array: array,\n        index: index,\n        count: count,\n        subscriber: subscriber\n      });\n    } else {\n      for (var i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n\n      subscriber.complete();\n    }\n  };\n\n  return ArrayObservable;\n}(Observable_1.Observable);\n\nvar ArrayObservable_2 = ArrayObservable;\nvar ArrayObservable_1 = {\n  ArrayObservable: ArrayObservable_2\n};\nvar of_1 = ArrayObservable_1.ArrayObservable.of;\nvar of$2 = {\n  of: of_1\n};\n\nvar isArrayLike_1 = function (x) {\n  return x && typeof x.length === 'number';\n};\n\nvar isArrayLike = {\n  isArrayLike: isArrayLike_1\n};\n\nfunction isPromise(value) {\n  return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n\nvar isPromise_2 = isPromise;\nvar isPromise_1 = {\n  isPromise: isPromise_2\n};\n\nvar __extends$6 = commonjsGlobal && commonjsGlobal.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\n\n\nvar PromiseObservable = function (_super) {\n  __extends$6(PromiseObservable, _super);\n\n  function PromiseObservable(promise, scheduler) {\n    _super.call(this);\n\n    this.promise = promise;\n    this.scheduler = scheduler;\n  }\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n\n\n  PromiseObservable.create = function (promise, scheduler) {\n    return new PromiseObservable(promise, scheduler);\n  };\n\n  PromiseObservable.prototype._subscribe = function (subscriber) {\n    var _this = this;\n\n    var promise = this.promise;\n    var scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(function (value) {\n          _this.value = value;\n          _this._isScalar = true;\n\n          if (!subscriber.closed) {\n            subscriber.next(value);\n            subscriber.complete();\n          }\n        }, function (err) {\n          if (!subscriber.closed) {\n            subscriber.error(err);\n          }\n        }).then(null, function (err) {\n          // escape the promise trap, throw unhandled errors\n          root.root.setTimeout(function () {\n            throw err;\n          });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, {\n            value: this.value,\n            subscriber: subscriber\n          });\n        }\n      } else {\n        promise.then(function (value) {\n          _this.value = value;\n          _this._isScalar = true;\n\n          if (!subscriber.closed) {\n            subscriber.add(scheduler.schedule(dispatchNext, 0, {\n              value: value,\n              subscriber: subscriber\n            }));\n          }\n        }, function (err) {\n          if (!subscriber.closed) {\n            subscriber.add(scheduler.schedule(dispatchError, 0, {\n              err: err,\n              subscriber: subscriber\n            }));\n          }\n        }).then(null, function (err) {\n          // escape the promise trap, throw unhandled errors\n          root.root.setTimeout(function () {\n            throw err;\n          });\n        });\n      }\n    }\n  };\n\n  return PromiseObservable;\n}(Observable_1.Observable);\n\nvar PromiseObservable_2 = PromiseObservable;\n\nfunction dispatchNext(arg) {\n  var value = arg.value,\n      subscriber = arg.subscriber;\n\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\nfunction dispatchError(arg) {\n  var err = arg.err,\n      subscriber = arg.subscriber;\n\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n\nvar PromiseObservable_1 = {\n  PromiseObservable: PromiseObservable_2\n};\nvar iterator = createCommonjsModule(function (module, exports) {\n  function symbolIteratorPonyfill(root$$2) {\n    var Symbol = root$$2.Symbol;\n\n    if (typeof Symbol === 'function') {\n      if (!Symbol.iterator) {\n        Symbol.iterator = Symbol('iterator polyfill');\n      }\n\n      return Symbol.iterator;\n    } else {\n      // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n      var Set_1 = root$$2.Set;\n\n      if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {\n        return '@@iterator';\n      }\n\n      var Map_1 = root$$2.Map; // required for compatability with es6-shim\n\n      if (Map_1) {\n        var keys = Object.getOwnPropertyNames(Map_1.prototype);\n\n        for (var i = 0; i < keys.length; ++i) {\n          var key = keys[i]; // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n\n          if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {\n            return key;\n          }\n        }\n      }\n\n      return '@@iterator';\n    }\n  }\n\n  exports.symbolIteratorPonyfill = symbolIteratorPonyfill;\n  exports.iterator = symbolIteratorPonyfill(root.root);\n  /**\n   * @deprecated use iterator instead\n   */\n\n  exports.$$iterator = exports.iterator;\n});\nvar iterator_1 = iterator.symbolIteratorPonyfill;\nvar iterator_2 = iterator.iterator;\nvar iterator_3 = iterator.$$iterator;\n\nvar __extends$7 = commonjsGlobal && commonjsGlobal.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\n\n\nvar IteratorObservable = function (_super) {\n  __extends$7(IteratorObservable, _super);\n\n  function IteratorObservable(iterator$$1, scheduler) {\n    _super.call(this);\n\n    this.scheduler = scheduler;\n\n    if (iterator$$1 == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator$$1);\n  }\n\n  IteratorObservable.create = function (iterator$$1, scheduler) {\n    return new IteratorObservable(iterator$$1, scheduler);\n  };\n\n  IteratorObservable.dispatch = function (state) {\n    var index = state.index,\n        hasError = state.hasError,\n        iterator$$1 = state.iterator,\n        subscriber = state.subscriber;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    var result = iterator$$1.next();\n\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator$$1.return === 'function') {\n        iterator$$1.return();\n      }\n\n      return;\n    }\n\n    this.schedule(state);\n  };\n\n  IteratorObservable.prototype._subscribe = function (subscriber) {\n    var index = 0;\n\n    var _a = this,\n        iterator$$1 = _a.iterator,\n        scheduler = _a.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index: index,\n        iterator: iterator$$1,\n        subscriber: subscriber\n      });\n    } else {\n      do {\n        var result = iterator$$1.next();\n\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n\n        if (subscriber.closed) {\n          if (typeof iterator$$1.return === 'function') {\n            iterator$$1.return();\n          }\n\n          break;\n        }\n      } while (true);\n    }\n  };\n\n  return IteratorObservable;\n}(Observable_1.Observable);\n\nvar IteratorObservable_2 = IteratorObservable;\n\nvar StringIterator = function () {\n  function StringIterator(str, idx, len) {\n    if (idx === void 0) {\n      idx = 0;\n    }\n\n    if (len === void 0) {\n      len = str.length;\n    }\n\n    this.str = str;\n    this.idx = idx;\n    this.len = len;\n  }\n\n  StringIterator.prototype[iterator.iterator] = function () {\n    return this;\n  };\n\n  StringIterator.prototype.next = function () {\n    return this.idx < this.len ? {\n      done: false,\n      value: this.str.charAt(this.idx++)\n    } : {\n      done: true,\n      value: undefined\n    };\n  };\n\n  return StringIterator;\n}();\n\nvar ArrayIterator = function () {\n  function ArrayIterator(arr, idx, len) {\n    if (idx === void 0) {\n      idx = 0;\n    }\n\n    if (len === void 0) {\n      len = toLength(arr);\n    }\n\n    this.arr = arr;\n    this.idx = idx;\n    this.len = len;\n  }\n\n  ArrayIterator.prototype[iterator.iterator] = function () {\n    return this;\n  };\n\n  ArrayIterator.prototype.next = function () {\n    return this.idx < this.len ? {\n      done: false,\n      value: this.arr[this.idx++]\n    } : {\n      done: true,\n      value: undefined\n    };\n  };\n\n  return ArrayIterator;\n}();\n\nfunction getIterator(obj) {\n  var i = obj[iterator.iterator];\n\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n\n  return obj[iterator.iterator]();\n}\n\nvar maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o) {\n  var len = +o.length;\n\n  if (isNaN(len)) {\n    return 0;\n  }\n\n  if (len === 0 || !numberIsFinite(len)) {\n    return len;\n  }\n\n  len = sign(len) * Math.floor(Math.abs(len));\n\n  if (len <= 0) {\n    return 0;\n  }\n\n  if (len > maxSafeInteger) {\n    return maxSafeInteger;\n  }\n\n  return len;\n}\n\nfunction numberIsFinite(value) {\n  return typeof value === 'number' && root.root.isFinite(value);\n}\n\nfunction sign(value) {\n  var valueAsNumber = +value;\n\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n\n  return valueAsNumber < 0 ? -1 : 1;\n}\n\nvar IteratorObservable_1 = {\n  IteratorObservable: IteratorObservable_2\n};\n\nvar __extends$8 = commonjsGlobal && commonjsGlobal.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\n\n\nvar ArrayLikeObservable = function (_super) {\n  __extends$8(ArrayLikeObservable, _super);\n\n  function ArrayLikeObservable(arrayLike, scheduler) {\n    _super.call(this);\n\n    this.arrayLike = arrayLike;\n    this.scheduler = scheduler;\n\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  ArrayLikeObservable.create = function (arrayLike, scheduler) {\n    var length = arrayLike.length;\n\n    if (length === 0) {\n      return new EmptyObservable_1.EmptyObservable();\n    } else if (length === 1) {\n      return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  };\n\n  ArrayLikeObservable.dispatch = function (state) {\n    var arrayLike = state.arrayLike,\n        index = state.index,\n        length = state.length,\n        subscriber = state.subscriber;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n    state.index = index + 1;\n    this.schedule(state);\n  };\n\n  ArrayLikeObservable.prototype._subscribe = function (subscriber) {\n    var index = 0;\n\n    var _a = this,\n        arrayLike = _a.arrayLike,\n        scheduler = _a.scheduler;\n\n    var length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike: arrayLike,\n        index: index,\n        length: length,\n        subscriber: subscriber\n      });\n    } else {\n      for (var i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n\n      subscriber.complete();\n    }\n  };\n\n  return ArrayLikeObservable;\n}(Observable_1.Observable);\n\nvar ArrayLikeObservable_2 = ArrayLikeObservable;\nvar ArrayLikeObservable_1 = {\n  ArrayLikeObservable: ArrayLikeObservable_2\n};\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\n\nvar Notification = function () {\n  function Notification(kind, value, error) {\n    this.kind = kind;\n    this.value = value;\n    this.error = error;\n    this.hasValue = kind === 'N';\n  }\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n\n\n  Notification.prototype.observe = function (observer) {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n\n      case 'E':\n        return observer.error && observer.error(this.error);\n\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  };\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n\n\n  Notification.prototype.do = function (next, error, complete) {\n    var kind = this.kind;\n\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n\n      case 'E':\n        return error && error(this.error);\n\n      case 'C':\n        return complete && complete();\n    }\n  };\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n\n\n  Notification.prototype.accept = function (nextOrObserver, error, complete) {\n    if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n      return this.observe(nextOrObserver);\n    } else {\n      return this.do(nextOrObserver, error, complete);\n    }\n  };\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n\n\n  Notification.prototype.toObservable = function () {\n    var kind = this.kind;\n\n    switch (kind) {\n      case 'N':\n        return Observable_1.Observable.of(this.value);\n\n      case 'E':\n        return Observable_1.Observable.throw(this.error);\n\n      case 'C':\n        return Observable_1.Observable.empty();\n    }\n\n    throw new Error('unexpected notification kind value');\n  };\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n\n\n  Notification.createNext = function (value) {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n\n    return Notification.undefinedValueNotification;\n  };\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n\n\n  Notification.createError = function (err) {\n    return new Notification('E', undefined, err);\n  };\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n\n\n  Notification.createComplete = function () {\n    return Notification.completeNotification;\n  };\n\n  Notification.completeNotification = new Notification('C');\n  Notification.undefinedValueNotification = new Notification('N', undefined);\n  return Notification;\n}();\n\nvar Notification_2 = Notification;\nvar Notification_1 = {\n  Notification: Notification_2\n};\n\nvar __extends$9 = commonjsGlobal && commonjsGlobal.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\n\n\nfunction observeOn(scheduler, delay) {\n  if (delay === void 0) {\n    delay = 0;\n  }\n\n  return function observeOnOperatorFunction(source) {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nvar observeOn_2 = observeOn;\n\nvar ObserveOnOperator = function () {\n  function ObserveOnOperator(scheduler, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    this.scheduler = scheduler;\n    this.delay = delay;\n  }\n\n  ObserveOnOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  };\n\n  return ObserveOnOperator;\n}();\n\nvar ObserveOnOperator_1 = ObserveOnOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nvar ObserveOnSubscriber = function (_super) {\n  __extends$9(ObserveOnSubscriber, _super);\n\n  function ObserveOnSubscriber(destination, scheduler, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    _super.call(this, destination);\n\n    this.scheduler = scheduler;\n    this.delay = delay;\n  }\n\n  ObserveOnSubscriber.dispatch = function (arg) {\n    var notification = arg.notification,\n        destination = arg.destination;\n    notification.observe(destination);\n    this.unsubscribe();\n  };\n\n  ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n    this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n  };\n\n  ObserveOnSubscriber.prototype._next = function (value) {\n    this.scheduleMessage(Notification_1.Notification.createNext(value));\n  };\n\n  ObserveOnSubscriber.prototype._error = function (err) {\n    this.scheduleMessage(Notification_1.Notification.createError(err));\n  };\n\n  ObserveOnSubscriber.prototype._complete = function () {\n    this.scheduleMessage(Notification_1.Notification.createComplete());\n  };\n\n  return ObserveOnSubscriber;\n}(Subscriber_1.Subscriber);\n\nvar ObserveOnSubscriber_1 = ObserveOnSubscriber;\n\nvar ObserveOnMessage = function () {\n  function ObserveOnMessage(notification, destination) {\n    this.notification = notification;\n    this.destination = destination;\n  }\n\n  return ObserveOnMessage;\n}();\n\nvar ObserveOnMessage_1 = ObserveOnMessage;\nvar observeOn_1 = {\n  observeOn: observeOn_2,\n  ObserveOnOperator: ObserveOnOperator_1,\n  ObserveOnSubscriber: ObserveOnSubscriber_1,\n  ObserveOnMessage: ObserveOnMessage_1\n};\n\nvar __extends$5 = commonjsGlobal && commonjsGlobal.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\n\n\nvar FromObservable = function (_super) {\n  __extends$5(FromObservable, _super);\n\n  function FromObservable(ish, scheduler) {\n    _super.call(this, null);\n\n    this.ish = ish;\n    this.scheduler = scheduler;\n  }\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n\n\n  FromObservable.create = function (ish, scheduler) {\n    if (ish != null) {\n      if (typeof ish[observable.observable] === 'function') {\n        if (ish instanceof Observable_1.Observable && !scheduler) {\n          return ish;\n        }\n\n        return new FromObservable(ish, scheduler);\n      } else if (isArray.isArray(ish)) {\n        return new ArrayObservable_1.ArrayObservable(ish, scheduler);\n      } else if (isPromise_1.isPromise(ish)) {\n        return new PromiseObservable_1.PromiseObservable(ish, scheduler);\n      } else if (typeof ish[iterator.iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable_1.IteratorObservable(ish, scheduler);\n      } else if (isArrayLike.isArrayLike(ish)) {\n        return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  };\n\n  FromObservable.prototype._subscribe = function (subscriber) {\n    var ish = this.ish;\n    var scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      return ish[observable.observable]().subscribe(subscriber);\n    } else {\n      return ish[observable.observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  };\n\n  return FromObservable;\n}(Observable_1.Observable);\n\nvar FromObservable_2 = FromObservable;\nvar FromObservable_1 = {\n  FromObservable: FromObservable_2\n};\nvar from_1 = FromObservable_1.FromObservable.create;\nvar from = {\n  from: from_1\n};\n\nvar __extends$11 = commonjsGlobal && commonjsGlobal.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar InnerSubscriber = function (_super) {\n  __extends$11(InnerSubscriber, _super);\n\n  function InnerSubscriber(parent, outerValue, outerIndex) {\n    _super.call(this);\n\n    this.parent = parent;\n    this.outerValue = outerValue;\n    this.outerIndex = outerIndex;\n    this.index = 0;\n  }\n\n  InnerSubscriber.prototype._next = function (value) {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  };\n\n  InnerSubscriber.prototype._error = function (error) {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  };\n\n  InnerSubscriber.prototype._complete = function () {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  };\n\n  return InnerSubscriber;\n}(Subscriber_1.Subscriber);\n\nvar InnerSubscriber_2 = InnerSubscriber;\nvar InnerSubscriber_1 = {\n  InnerSubscriber: InnerSubscriber_2\n};\n\nfunction subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n  var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable_1.Observable) {\n    if (result._isScalar) {\n      destination.next(result.value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike.isArrayLike(result)) {\n    for (var i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise_1.isPromise(result)) {\n    result.then(function (value) {\n      if (!destination.closed) {\n        destination.next(value);\n        destination.complete();\n      }\n    }, function (err) {\n      return destination.error(err);\n    }).then(null, function (err) {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.root.setTimeout(function () {\n        throw err;\n      });\n    });\n    return destination;\n  } else if (result && typeof result[iterator.iterator] === 'function') {\n    var iterator$$2 = result[iterator.iterator]();\n\n    do {\n      var item = iterator$$2.next();\n\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n\n      destination.next(item.value);\n\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[observable.observable] === 'function') {\n    var obs = result[observable.observable]();\n\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    var value = isObject_1.isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n    var msg = \"You provided \" + value + \" where a stream was expected.\" + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n\n  return null;\n}\n\nvar subscribeToResult_2 = subscribeToResult;\nvar subscribeToResult_1 = {\n  subscribeToResult: subscribeToResult_2\n};\n\nvar __extends$12 = commonjsGlobal && commonjsGlobal.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar OuterSubscriber = function (_super) {\n  __extends$12(OuterSubscriber, _super);\n\n  function OuterSubscriber() {\n    _super.apply(this, arguments);\n  }\n\n  OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.destination.next(innerValue);\n  };\n\n  OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n    this.destination.error(error);\n  };\n\n  OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n    this.destination.complete();\n  };\n\n  return OuterSubscriber;\n}(Subscriber_1.Subscriber);\n\nvar OuterSubscriber_2 = OuterSubscriber;\nvar OuterSubscriber_1 = {\n  OuterSubscriber: OuterSubscriber_2\n};\n\nvar __extends$10 = commonjsGlobal && commonjsGlobal.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\n\n\nfunction mergeMap(project, resultSelector, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n\n  return function mergeMapOperatorFunction(source) {\n    if (typeof resultSelector === 'number') {\n      concurrent = resultSelector;\n      resultSelector = null;\n    }\n\n    return source.lift(new MergeMapOperator(project, resultSelector, concurrent));\n  };\n}\n\nvar mergeMap_2 = mergeMap;\n\nvar MergeMapOperator = function () {\n  function MergeMapOperator(project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n\n    this.project = project;\n    this.resultSelector = resultSelector;\n    this.concurrent = concurrent;\n  }\n\n  MergeMapOperator.prototype.call = function (observer, source) {\n    return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n  };\n\n  return MergeMapOperator;\n}();\n\nvar MergeMapOperator_1 = MergeMapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nvar MergeMapSubscriber = function (_super) {\n  __extends$10(MergeMapSubscriber, _super);\n\n  function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n\n    _super.call(this, destination);\n\n    this.project = project;\n    this.resultSelector = resultSelector;\n    this.concurrent = concurrent;\n    this.hasCompleted = false;\n    this.buffer = [];\n    this.active = 0;\n    this.index = 0;\n  }\n\n  MergeMapSubscriber.prototype._next = function (value) {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  };\n\n  MergeMapSubscriber.prototype._tryNext = function (value) {\n    var result;\n    var index = this.index++;\n\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.active++;\n\n    this._innerSub(result, value, index);\n  };\n\n  MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n    this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n  };\n\n  MergeMapSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  };\n\n  MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  };\n\n  MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n    var result;\n\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.destination.next(result);\n  };\n\n  MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n    var buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  };\n\n  return MergeMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);\n\nvar MergeMapSubscriber_1 = MergeMapSubscriber;\nvar mergeMap_1 = {\n  mergeMap: mergeMap_2,\n  MergeMapOperator: MergeMapOperator_1,\n  MergeMapSubscriber: MergeMapSubscriber_1\n};\n\nfunction identity(x) {\n  return x;\n}\n\nvar identity_2 = identity;\nvar identity_1 = {\n  identity: identity_2\n};\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\n\nfunction mergeAll(concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n\n  return mergeMap_1.mergeMap(identity_1.identity, null, concurrent);\n}\n\nvar mergeAll_2 = mergeAll;\nvar mergeAll_1 = {\n  mergeAll: mergeAll_2\n};\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\n\nfunction concatAll() {\n  return mergeAll_1.mergeAll(1);\n}\n\nvar concatAll_2 = concatAll;\nvar concatAll_1 = {\n  concatAll: concatAll_2\n};\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\n\nfunction concat$1() {\n  var observables = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i - 0] = arguments[_i];\n  }\n\n  if (observables.length === 1 || observables.length === 2 && isScheduler_1.isScheduler(observables[1])) {\n    return from.from(observables[0]);\n  }\n\n  return concatAll_1.concatAll()(of$2.of.apply(void 0, observables));\n}\n\nvar concat_2$2 = concat$1;\nvar concat_1 = {\n  concat: concat_2$2\n};\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\n\nfunction concat() {\n  var observables = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i - 0] = arguments[_i];\n  }\n\n  return function (source) {\n    return source.lift.call(concat_1.concat.apply(void 0, [source].concat(observables)));\n  };\n}\n\nvar concat_3 = concat;\n\nvar __decorate$3 = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nclass MissingTranslationHandler {}\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\n\n\nlet FakeMissingTranslationHandler = class FakeMissingTranslationHandler {\n  handle(params) {\n    return params.key;\n  }\n\n};\n\nFakeMissingTranslationHandler.ɵfac = function FakeMissingTranslationHandler_Factory(t) {\n  return new (t || FakeMissingTranslationHandler)();\n};\n\nFakeMissingTranslationHandler.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: FakeMissingTranslationHandler,\n  factory: function (t) {\n    return FakeMissingTranslationHandler.ɵfac(t);\n  }\n});\n\nvar __decorate$4 = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nclass TranslateCompiler {}\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\n\n\nlet TranslateFakeCompiler = class TranslateFakeCompiler extends TranslateCompiler {\n  compile(value, lang) {\n    return value;\n  }\n\n  compileTranslations(translations, lang) {\n    return translations;\n  }\n\n};\n\nTranslateFakeCompiler.ɵfac = /*@__PURE__*/function () {\n  let ɵTranslateFakeCompiler_BaseFactory;\n  return function TranslateFakeCompiler_Factory(t) {\n    return (ɵTranslateFakeCompiler_BaseFactory || (ɵTranslateFakeCompiler_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TranslateFakeCompiler)))(t || TranslateFakeCompiler);\n  };\n}();\n\nTranslateFakeCompiler.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: TranslateFakeCompiler,\n  factory: function (t) {\n    return TranslateFakeCompiler.ɵfac(t);\n  }\n});\n/* tslint:disable */\n\n/**\n * @name equals\n *\n * @description\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param {*} o1 Object or value to compare.\n * @param {*} o2 Object or value to compare.\n * @returns {boolean} True if arguments are equal.\n */\n\nfunction equals(o1, o2) {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n\n  let t1 = typeof o1,\n      t2 = typeof o2,\n      length,\n      key,\n      keySet;\n\n  if (t1 == t2 && t1 == 'object') {\n    if (Array.isArray(o1)) {\n      if (!Array.isArray(o2)) return false;\n\n      if ((length = o1.length) == o2.length) {\n        for (key = 0; key < length; key++) {\n          if (!equals(o1[key], o2[key])) return false;\n        }\n\n        return true;\n      }\n    } else {\n      if (Array.isArray(o2)) {\n        return false;\n      }\n\n      keySet = Object.create(null);\n\n      for (key in o1) {\n        if (!equals(o1[key], o2[key])) {\n          return false;\n        }\n\n        keySet[key] = true;\n      }\n\n      for (key in o2) {\n        if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n}\n/* tslint:enable */\n\n\nfunction isDefined(value) {\n  return typeof value !== 'undefined' && value !== null;\n}\n\nfunction isObject$1(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nfunction mergeDeep(target, source) {\n  let output = Object.assign({}, target);\n\n  if (isObject$1(target) && isObject$1(source)) {\n    Object.keys(source).forEach(key => {\n      if (isObject$1(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, {\n            [key]: source[key]\n          });\n        } else {\n          output[key] = mergeDeep(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, {\n          [key]: source[key]\n        });\n      }\n    });\n  }\n\n  return output;\n}\n\nvar __decorate$5 = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nclass TranslateParser {}\n\nlet TranslateDefaultParser = class TranslateDefaultParser extends TranslateParser {\n  constructor() {\n    super(...arguments);\n    this.templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\n  }\n\n  interpolate(expr, params) {\n    let result;\n\n    if (typeof expr === 'string') {\n      result = this.interpolateString(expr, params);\n    } else if (typeof expr === 'function') {\n      result = this.interpolateFunction(expr, params);\n    } else {\n      // this should not happen, but an unrelated TranslateService test depends on it\n      result = expr;\n    }\n\n    return result;\n  }\n\n  getValue(target, key) {\n    let keys = key.split('.');\n    key = '';\n\n    do {\n      key += keys.shift();\n\n      if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n        target = target[key];\n        key = '';\n      } else if (!keys.length) {\n        target = undefined;\n      } else {\n        key += '.';\n      }\n    } while (keys.length);\n\n    return target;\n  }\n\n  interpolateFunction(fn, params) {\n    return fn(params);\n  }\n\n  interpolateString(expr, params) {\n    if (!params) {\n      return expr;\n    }\n\n    return expr.replace(this.templateMatcher, (substring, b) => {\n      let r = this.getValue(params, b);\n      return isDefined(r) ? r : substring;\n    });\n  }\n\n};\n\nTranslateDefaultParser.ɵfac = /*@__PURE__*/function () {\n  let ɵTranslateDefaultParser_BaseFactory;\n  return function TranslateDefaultParser_Factory(t) {\n    return (ɵTranslateDefaultParser_BaseFactory || (ɵTranslateDefaultParser_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TranslateDefaultParser)))(t || TranslateDefaultParser);\n  };\n}();\n\nTranslateDefaultParser.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: TranslateDefaultParser,\n  factory: function (t) {\n    return TranslateDefaultParser.ɵfac(t);\n  }\n});\n\nclass TranslateStore {\n  constructor() {\n    /**\n     * The lang currently used\n     * @type {string}\n     */\n    this.currentLang = this.defaultLang;\n    /**\n     * a list of translations per lang\n     * @type {{}}\n     */\n\n    this.translations = {};\n    /**\n     * an array of langs\n     * @type {Array}\n     */\n\n    this.langs = [];\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<TranslationChangeEvent>}\n     */\n\n    this.onTranslationChange = new EventEmitter();\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<LangChangeEvent>}\n     */\n\n    this.onLangChange = new EventEmitter();\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<DefaultLangChangeEvent>}\n     */\n\n    this.onDefaultLangChange = new EventEmitter();\n  }\n\n}\n\nvar __decorate$2 = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nconst USE_STORE = new InjectionToken('USE_STORE');\nconst USE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\nlet TranslateService = class TranslateService {\n  /**\n   *\n   * @param store an instance of the store (that is supposed to be unique)\n   * @param currentLoader An instance of the loader currently used\n   * @param compiler An instance of the compiler currently used\n   * @param parser An instance of the parser currently used\n   * @param missingTranslationHandler A handler for missing translations.\n   * @param isolate whether this service should use the store or not\n   * @param useDefaultLang whether we should use default language translation when current language translation is missing.\n   */\n  constructor(store, currentLoader, compiler, parser, missingTranslationHandler, useDefaultLang = true, isolate = false) {\n    this.store = store;\n    this.currentLoader = currentLoader;\n    this.compiler = compiler;\n    this.parser = parser;\n    this.missingTranslationHandler = missingTranslationHandler;\n    this.useDefaultLang = useDefaultLang;\n    this.isolate = isolate;\n    this.pending = false;\n    this._onTranslationChange = new EventEmitter();\n    this._onLangChange = new EventEmitter();\n    this._onDefaultLangChange = new EventEmitter();\n    this._langs = [];\n    this._translations = {};\n    this._translationRequests = {};\n  }\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n   *     // do something\n   * });\n   * @type {EventEmitter<TranslationChangeEvent>}\n   */\n\n\n  get onTranslationChange() {\n    return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n  }\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n   *     // do something\n   * });\n   * @type {EventEmitter<LangChangeEvent>}\n   */\n\n\n  get onLangChange() {\n    return this.isolate ? this._onLangChange : this.store.onLangChange;\n  }\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n   *     // do something\n   * });\n   * @type {EventEmitter<DefaultLangChangeEvent>}\n   */\n\n\n  get onDefaultLangChange() {\n    return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n  }\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   */\n\n\n  get defaultLang() {\n    return this.isolate ? this._defaultLang : this.store.defaultLang;\n  }\n\n  set defaultLang(defaultLang) {\n    if (this.isolate) {\n      this._defaultLang = defaultLang;\n    } else {\n      this.store.defaultLang = defaultLang;\n    }\n  }\n  /**\n   * The lang currently used\n   * @type {string}\n   */\n\n\n  get currentLang() {\n    return this.isolate ? this._currentLang : this.store.currentLang;\n  }\n\n  set currentLang(currentLang) {\n    if (this.isolate) {\n      this._currentLang = currentLang;\n    } else {\n      this.store.currentLang = currentLang;\n    }\n  }\n  /**\n   * an array of langs\n   * @type {Array}\n   */\n\n\n  get langs() {\n    return this.isolate ? this._langs : this.store.langs;\n  }\n\n  set langs(langs) {\n    if (this.isolate) {\n      this._langs = langs;\n    } else {\n      this.store.langs = langs;\n    }\n  }\n  /**\n   * a list of translations per lang\n   * @type {{}}\n   */\n\n\n  get translations() {\n    return this.isolate ? this._translations : this.store.translations;\n  }\n\n  set translations(translations) {\n    if (this.isolate) {\n      this._translations = translations;\n    } else {\n      this.store.translations = translations;\n    }\n  }\n  /**\n   * Sets the default language to use as a fallback\n   * @param lang\n   */\n\n\n  setDefaultLang(lang) {\n    if (lang === this.defaultLang) {\n      return;\n    }\n\n    let pending = this.retrieveTranslations(lang);\n\n    if (typeof pending !== \"undefined\") {\n      // on init set the defaultLang immediately\n      if (!this.defaultLang) {\n        this.defaultLang = lang;\n      }\n\n      pending.pipe(take$1(1)).subscribe(res => {\n        this.changeDefaultLang(lang);\n      });\n    } else {\n      this.changeDefaultLang(lang);\n    }\n  }\n  /**\n   * Gets the default language used\n   * @returns string\n   */\n\n\n  getDefaultLang() {\n    return this.defaultLang;\n  }\n  /**\n   * Changes the lang currently used\n   * @param lang\n   * @returns {Observable<*>}\n   */\n\n\n  use(lang) {\n    // don't change the language if the language given is already selected\n    if (lang === this.currentLang) {\n      return of$1(this.translations[lang]);\n    }\n\n    let pending = this.retrieveTranslations(lang);\n\n    if (typeof pending !== \"undefined\") {\n      // on init set the currentLang immediately\n      if (!this.currentLang) {\n        this.currentLang = lang;\n      }\n\n      pending.pipe(take$1(1)).subscribe(res => {\n        this.changeLang(lang);\n      });\n      return pending;\n    } else {\n      this.changeLang(lang);\n      return of$1(this.translations[lang]);\n    }\n  }\n  /**\n   * Retrieves the given translations\n   * @param lang\n   * @returns {Observable<*>}\n   */\n\n\n  retrieveTranslations(lang) {\n    let pending; // if this language is unavailable, ask for it\n\n    if (typeof this.translations[lang] === \"undefined\") {\n      this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n      pending = this._translationRequests[lang];\n    }\n\n    return pending;\n  }\n  /**\n   * Gets an object of translations for a given language with the current loader\n   * and passes it through the compiler\n   * @param lang\n   * @returns {Observable<*>}\n   */\n\n\n  getTranslation(lang) {\n    this.pending = true;\n    this.loadingTranslations = this.currentLoader.getTranslation(lang).pipe(share$1());\n    this.loadingTranslations.pipe(take$1(1)).subscribe(res => {\n      this.translations[lang] = this.compiler.compileTranslations(res, lang);\n      this.updateLangs();\n      this.pending = false;\n    }, err => {\n      this.pending = false;\n    });\n    return this.loadingTranslations;\n  }\n  /**\n   * Manually sets an object of translations for a given language\n   * after passing it through the compiler\n   * @param lang\n   * @param translations\n   * @param shouldMerge\n   */\n\n\n  setTranslation(lang, translations, shouldMerge = false) {\n    translations = this.compiler.compileTranslations(translations, lang);\n\n    if (shouldMerge && this.translations[lang]) {\n      this.translations[lang] = mergeDeep(this.translations[lang], translations);\n    } else {\n      this.translations[lang] = translations;\n    }\n\n    this.updateLangs();\n    this.onTranslationChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    });\n  }\n  /**\n   * Returns an array of currently available langs\n   * @returns {any}\n   */\n\n\n  getLangs() {\n    return this.langs;\n  }\n  /**\n   * @param langs\n   * Add available langs\n   */\n\n\n  addLangs(langs) {\n    langs.forEach(lang => {\n      if (this.langs.indexOf(lang) === -1) {\n        this.langs.push(lang);\n      }\n    });\n  }\n  /**\n   * Update the list of available langs\n   */\n\n\n  updateLangs() {\n    this.addLangs(Object.keys(this.translations));\n  }\n  /**\n   * Returns the parsed result of the translations\n   * @param translations\n   * @param key\n   * @param interpolateParams\n   * @returns {any}\n   */\n\n\n  getParsedResult(translations, key, interpolateParams) {\n    let res;\n\n    if (key instanceof Array) {\n      let result = {},\n          observables = false;\n\n      for (let k of key) {\n        result[k] = this.getParsedResult(translations, k, interpolateParams);\n\n        if (typeof result[k].subscribe === \"function\") {\n          observables = true;\n        }\n      }\n\n      if (observables) {\n        let mergedObs;\n\n        for (let k of key) {\n          let obs = typeof result[k].subscribe === \"function\" ? result[k] : of$1(result[k]);\n\n          if (typeof mergedObs === \"undefined\") {\n            mergedObs = obs;\n          } else {\n            mergedObs = mergedObs.pipe(merge$1(obs));\n          }\n        }\n\n        return mergedObs.pipe(toArray$1(), map$1(arr => {\n          let obj = {};\n          arr.forEach((value, index) => {\n            obj[key[index]] = value;\n          });\n          return obj;\n        }));\n      }\n\n      return result;\n    }\n\n    if (translations) {\n      res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n    }\n\n    if (typeof res === \"undefined\" && this.defaultLang && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n      res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n    }\n\n    if (typeof res === \"undefined\") {\n      let params = {\n        key,\n        translateService: this\n      };\n\n      if (typeof interpolateParams !== 'undefined') {\n        params.interpolateParams = interpolateParams;\n      }\n\n      res = this.missingTranslationHandler.handle(params);\n    }\n\n    return typeof res !== \"undefined\" ? res : key;\n  }\n  /**\n   * Gets the translated value of a key (or an array of keys)\n   * @param key\n   * @param interpolateParams\n   * @returns {any} the translated key, or an object of translated keys\n   */\n\n\n  get(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    } // check if we are loading a new translation to use\n\n\n    if (this.pending) {\n      return Observable$1.create(observer => {\n        let onComplete = res => {\n          observer.next(res);\n          observer.complete();\n        };\n\n        let onError = err => {\n          observer.error(err);\n        };\n\n        this.loadingTranslations.subscribe(res => {\n          res = this.getParsedResult(this.compiler.compileTranslations(res, this.currentLang), key, interpolateParams);\n\n          if (typeof res.subscribe === \"function\") {\n            res.subscribe(onComplete, onError);\n          } else {\n            onComplete(res);\n          }\n        }, onError);\n      });\n    } else {\n      let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n\n      if (typeof res.subscribe === \"function\") {\n        return res;\n      } else {\n        return of$1(res);\n      }\n    }\n  }\n  /**\n   * Returns a stream of translated values of a key (or an array of keys) which updates\n   * whenever the language changes.\n   * @param key\n   * @param interpolateParams\n   * @returns {any} A stream of the translated key, or an object of translated keys\n   */\n\n\n  stream(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n\n    return this.get(key, interpolateParams).pipe(concat_3(this.onLangChange.pipe(switchMap$1(event => {\n      const res = this.getParsedResult(event.translations, key, interpolateParams);\n\n      if (typeof res.subscribe === \"function\") {\n        return res;\n      } else {\n        return of$1(res);\n      }\n    }))));\n  }\n  /**\n   * Returns a translation instantly from the internal state of loaded translation.\n   * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n   * @param key\n   * @param interpolateParams\n   * @returns {string}\n   */\n\n\n  instant(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n\n    let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n\n    if (typeof res.subscribe !== \"undefined\") {\n      if (key instanceof Array) {\n        let obj = {};\n        key.forEach((value, index) => {\n          obj[key[index]] = key[index];\n        });\n        return obj;\n      }\n\n      return key;\n    } else {\n      return res;\n    }\n  }\n  /**\n   * Sets the translated value of a key, after compiling it\n   * @param key\n   * @param value\n   * @param lang\n   */\n\n\n  set(key, value, lang = this.currentLang) {\n    this.translations[lang][key] = this.compiler.compile(value, lang);\n    this.updateLangs();\n    this.onTranslationChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    });\n  }\n  /**\n   * Changes the current lang\n   * @param lang\n   */\n\n\n  changeLang(lang) {\n    this.currentLang = lang;\n    this.onLangChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    }); // if there is no default lang, use the one that we just set\n\n    if (!this.defaultLang) {\n      this.changeDefaultLang(lang);\n    }\n  }\n  /**\n   * Changes the default lang\n   * @param lang\n   */\n\n\n  changeDefaultLang(lang) {\n    this.defaultLang = lang;\n    this.onDefaultLangChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    });\n  }\n  /**\n   * Allows to reload the lang file from the file\n   * @param lang\n   * @returns {Observable<any>}\n   */\n\n\n  reloadLang(lang) {\n    this.resetLang(lang);\n    return this.getTranslation(lang);\n  }\n  /**\n   * Deletes inner translation\n   * @param lang\n   */\n\n\n  resetLang(lang) {\n    this._translationRequests[lang] = undefined;\n    this.translations[lang] = undefined;\n  }\n  /**\n   * Returns the language code name from the browser, e.g. \"de\"\n   *\n   * @returns string\n   */\n\n\n  getBrowserLang() {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n\n    let browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n    if (browserLang.indexOf('-') !== -1) {\n      browserLang = browserLang.split('-')[0];\n    }\n\n    if (browserLang.indexOf('_') !== -1) {\n      browserLang = browserLang.split('_')[0];\n    }\n\n    return browserLang;\n  }\n  /**\n   * Returns the culture language code name from the browser, e.g. \"de-DE\"\n   *\n   * @returns string\n   */\n\n\n  getBrowserCultureLang() {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n\n    let browserCultureLang = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n    return browserCultureLang;\n  }\n\n};\n\nTranslateService.ɵfac = function TranslateService_Factory(t) {\n  return new (t || TranslateService)(ɵngcc0.ɵɵinject(TranslateStore), ɵngcc0.ɵɵinject(TranslateLoader), ɵngcc0.ɵɵinject(TranslateCompiler), ɵngcc0.ɵɵinject(TranslateParser), ɵngcc0.ɵɵinject(MissingTranslationHandler), ɵngcc0.ɵɵinject(USE_DEFAULT_LANG), ɵngcc0.ɵɵinject(USE_STORE));\n};\n\nTranslateService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: TranslateService,\n  factory: function (t) {\n    return TranslateService.ɵfac(t);\n  }\n});\nTranslateService = __decorate$2([__param(5, Inject(USE_DEFAULT_LANG)), __param(6, Inject(USE_STORE)), __metadata(\"design:paramtypes\", [TranslateStore, TranslateLoader, TranslateCompiler, TranslateParser, MissingTranslationHandler, Boolean, Boolean])], TranslateService);\n\nvar __decorate$6 = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata$1 = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nlet TranslateDirective = class TranslateDirective {\n  constructor(translateService, element, _ref) {\n    this.translateService = translateService;\n    this.element = element;\n    this._ref = _ref; // subscribe to onTranslationChange event, in case the translations of the current lang change\n\n    if (!this.onTranslationChangeSub) {\n      this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe(event => {\n        if (event.lang === this.translateService.currentLang) {\n          this.checkNodes(true, event.translations);\n        }\n      });\n    } // subscribe to onLangChange event, in case the language changes\n\n\n    if (!this.onLangChangeSub) {\n      this.onLangChangeSub = this.translateService.onLangChange.subscribe(event => {\n        this.checkNodes(true, event.translations);\n      });\n    } // subscribe to onDefaultLangChange event, in case the default language changes\n\n\n    if (!this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe(event => {\n        this.checkNodes(true);\n      });\n    }\n  }\n\n  set translate(key) {\n    if (key) {\n      this.key = key;\n      this.checkNodes();\n    }\n  }\n\n  set translateParams(params) {\n    if (!equals(this.currentParams, params)) {\n      this.currentParams = params;\n      this.checkNodes(true);\n    }\n  }\n\n  ngAfterViewChecked() {\n    this.checkNodes();\n  }\n\n  checkNodes(forceUpdate = false, translations) {\n    let nodes = this.element.nativeElement.childNodes; // if the element is empty\n\n    if (!nodes.length) {\n      // we add the key as content\n      this.setContent(this.element.nativeElement, this.key);\n      nodes = this.element.nativeElement.childNodes;\n    }\n\n    for (let i = 0; i < nodes.length; ++i) {\n      let node = nodes[i];\n\n      if (node.nodeType === 3) {\n        let key;\n\n        if (this.key) {\n          key = this.key;\n\n          if (forceUpdate) {\n            node.lastKey = null;\n          }\n        } else {\n          let content = this.getContent(node).trim();\n\n          if (content.length) {\n            // we want to use the content as a key, not the translation value\n            if (content !== node.currentValue) {\n              key = content; // the content was changed from the user, we'll use it as a reference if needed\n\n              node.originalContent = this.getContent(node);\n            } else if (node.originalContent && forceUpdate) {\n              node.lastKey = null; // the current content is the translation, not the key, use the last real content as key\n\n              key = node.originalContent.trim();\n            }\n          }\n        }\n\n        this.updateValue(key, node, translations);\n      }\n    }\n  }\n\n  updateValue(key, node, translations) {\n    if (key) {\n      if (node.lastKey === key && this.lastParams === this.currentParams) {\n        return;\n      }\n\n      this.lastParams = this.currentParams;\n\n      let onTranslation = res => {\n        if (res !== key) {\n          node.lastKey = key;\n        }\n\n        if (!node.originalContent) {\n          node.originalContent = this.getContent(node);\n        }\n\n        node.currentValue = isDefined(res) ? res : node.originalContent || key; // we replace in the original content to preserve spaces that we might have trimmed\n\n        this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n\n        this._ref.markForCheck();\n      };\n\n      if (isDefined(translations)) {\n        let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n\n        if (typeof res.subscribe === \"function\") {\n          res.subscribe(onTranslation);\n        } else {\n          onTranslation(res);\n        }\n      } else {\n        this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n      }\n    }\n  }\n\n  getContent(node) {\n    return isDefined(node.textContent) ? node.textContent : node.data;\n  }\n\n  setContent(node, content) {\n    if (isDefined(node.textContent)) {\n      node.textContent = content;\n    } else {\n      node.data = content;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.onLangChangeSub) {\n      this.onLangChangeSub.unsubscribe();\n    }\n\n    if (this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub.unsubscribe();\n    }\n\n    if (this.onTranslationChangeSub) {\n      this.onTranslationChangeSub.unsubscribe();\n    }\n  }\n\n};\n\nTranslateDirective.ɵfac = function TranslateDirective_Factory(t) {\n  return new (t || TranslateDirective)(ɵngcc0.ɵɵdirectiveInject(TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nTranslateDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: TranslateDirective,\n  selectors: [[\"\", \"translate\", \"\"], [\"\", \"ngx-translate\", \"\"]],\n  inputs: {\n    translate: \"translate\",\n    translateParams: \"translateParams\"\n  }\n});\n\n__decorate$6([Input(), __metadata$1(\"design:type\", String), __metadata$1(\"design:paramtypes\", [String])], TranslateDirective.prototype, \"translate\", null);\n\n__decorate$6([Input(), __metadata$1(\"design:type\", Object), __metadata$1(\"design:paramtypes\", [Object])], TranslateDirective.prototype, \"translateParams\", null);\n\nTranslateDirective = __decorate$6([__metadata$1(\"design:paramtypes\", [TranslateService, ElementRef, ChangeDetectorRef])], TranslateDirective);\n\nvar __decorate$7 = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata$2 = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nlet TranslatePipe = class TranslatePipe {\n  constructor(translate, _ref) {\n    this.translate = translate;\n    this._ref = _ref;\n    this.value = '';\n  }\n\n  updateValue(key, interpolateParams, translations) {\n    let onTranslation = res => {\n      this.value = res !== undefined ? res : key;\n      this.lastKey = key;\n\n      this._ref.markForCheck();\n    };\n\n    if (translations) {\n      let res = this.translate.getParsedResult(translations, key, interpolateParams);\n\n      if (typeof res.subscribe === 'function') {\n        res.subscribe(onTranslation);\n      } else {\n        onTranslation(res);\n      }\n    }\n\n    this.translate.get(key, interpolateParams).subscribe(onTranslation);\n  }\n\n  transform(query, ...args) {\n    if (!query || query.length === 0) {\n      return query;\n    } // if we ask another time for the same key, return the last value\n\n\n    if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n      return this.value;\n    }\n\n    let interpolateParams;\n\n    if (isDefined(args[0]) && args.length) {\n      if (typeof args[0] === 'string' && args[0].length) {\n        // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n        // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n        let validArgs = args[0].replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":').replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n\n        try {\n          interpolateParams = JSON.parse(validArgs);\n        } catch (e) {\n          throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n        }\n      } else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n        interpolateParams = args[0];\n      }\n    } // store the query, in case it changes\n\n\n    this.lastKey = query; // store the params, in case they change\n\n    this.lastParams = args; // set the value\n\n    this.updateValue(query, interpolateParams); // if there is a subscription to onLangChange, clean it\n\n    this._dispose(); // subscribe to onTranslationChange event, in case the translations change\n\n\n    if (!this.onTranslationChange) {\n      this.onTranslationChange = this.translate.onTranslationChange.subscribe(event => {\n        if (this.lastKey && event.lang === this.translate.currentLang) {\n          this.lastKey = null;\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    } // subscribe to onLangChange event, in case the language changes\n\n\n    if (!this.onLangChange) {\n      this.onLangChange = this.translate.onLangChange.subscribe(event => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    } // subscribe to onDefaultLangChange event, in case the default language changes\n\n\n    if (!this.onDefaultLangChange) {\n      this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n\n          this.updateValue(query, interpolateParams);\n        }\n      });\n    }\n\n    return this.value;\n  }\n  /**\n   * Clean any existing subscription to change events\n   * @private\n   */\n\n\n  _dispose() {\n    if (typeof this.onTranslationChange !== 'undefined') {\n      this.onTranslationChange.unsubscribe();\n      this.onTranslationChange = undefined;\n    }\n\n    if (typeof this.onLangChange !== 'undefined') {\n      this.onLangChange.unsubscribe();\n      this.onLangChange = undefined;\n    }\n\n    if (typeof this.onDefaultLangChange !== 'undefined') {\n      this.onDefaultLangChange.unsubscribe();\n      this.onDefaultLangChange = undefined;\n    }\n  }\n\n  ngOnDestroy() {\n    this._dispose();\n  }\n\n};\n\nTranslatePipe.ɵfac = function TranslatePipe_Factory(t) {\n  return new (t || TranslatePipe)(ɵngcc0.ɵɵdirectiveInject(TranslateService, 16), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef, 16));\n};\n\nTranslatePipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n  name: \"translate\",\n  type: TranslatePipe,\n  pure: false\n});\nTranslatePipe.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: TranslatePipe,\n  factory: function (t) {\n    return TranslatePipe.ɵfac(t);\n  }\n});\nTranslatePipe = __decorate$7([__metadata$2(\"design:paramtypes\", [TranslateService, ChangeDetectorRef])], TranslatePipe);\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nlet TranslateModule = TranslateModule_1 = class TranslateModule {\n  /**\n   * Use this method in your root module to provide the TranslateService\n   * @param {TranslateModuleConfig} config\n   * @returns {ModuleWithProviders}\n   */\n  static forRoot(config = {}) {\n    return {\n      ngModule: TranslateModule_1,\n      providers: [config.loader || {\n        provide: TranslateLoader,\n        useClass: TranslateFakeLoader\n      }, config.compiler || {\n        provide: TranslateCompiler,\n        useClass: TranslateFakeCompiler\n      }, config.parser || {\n        provide: TranslateParser,\n        useClass: TranslateDefaultParser\n      }, config.missingTranslationHandler || {\n        provide: MissingTranslationHandler,\n        useClass: FakeMissingTranslationHandler\n      }, TranslateStore, {\n        provide: USE_STORE,\n        useValue: config.isolate\n      }, {\n        provide: USE_DEFAULT_LANG,\n        useValue: config.useDefaultLang\n      }, TranslateService]\n    };\n  }\n  /**\n   * Use this method in your other (non root) modules to import the directive/pipe\n   * @param {TranslateModuleConfig} config\n   * @returns {ModuleWithProviders}\n   */\n\n\n  static forChild(config = {}) {\n    return {\n      ngModule: TranslateModule_1,\n      providers: [config.loader || {\n        provide: TranslateLoader,\n        useClass: TranslateFakeLoader\n      }, config.compiler || {\n        provide: TranslateCompiler,\n        useClass: TranslateFakeCompiler\n      }, config.parser || {\n        provide: TranslateParser,\n        useClass: TranslateDefaultParser\n      }, config.missingTranslationHandler || {\n        provide: MissingTranslationHandler,\n        useClass: FakeMissingTranslationHandler\n      }, {\n        provide: USE_STORE,\n        useValue: config.isolate\n      }, {\n        provide: USE_DEFAULT_LANG,\n        useValue: config.useDefaultLang\n      }, TranslateService]\n    };\n  }\n\n};\n\nTranslateModule.ɵfac = function TranslateModule_Factory(t) {\n  return new (t || TranslateModule)();\n};\n\nTranslateModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: TranslateModule\n});\nTranslateModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TranslateFakeLoader, [{\n    type: Injectable\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FakeMissingTranslationHandler, [{\n    type: Injectable\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TranslateFakeCompiler, [{\n    type: Injectable\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TranslateDefaultParser, [{\n    type: Injectable\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TranslateService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: TranslateStore\n    }, {\n      type: TranslateLoader\n    }, {\n      type: TranslateCompiler\n    }, {\n      type: TranslateParser\n    }, {\n      type: MissingTranslationHandler\n    }, {\n      type: Boolean,\n      decorators: [{\n        type: Inject,\n        args: [USE_DEFAULT_LANG]\n      }]\n    }, {\n      type: Boolean,\n      decorators: [{\n        type: Inject,\n        args: [USE_STORE]\n      }]\n    }];\n  }, null);\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TranslateDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[translate],[ngx-translate]'\n    }]\n  }], function () {\n    return [{\n      type: TranslateService\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    translate: [{\n      type: Input\n    }],\n    translateParams: [{\n      type: Input\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TranslatePipe, [{\n    type: Injectable\n  }, {\n    type: Pipe,\n    args: [{\n      name: 'translate',\n      pure: false // required to update the value when the promise is resolved\n\n    }]\n  }], function () {\n    return [{\n      type: TranslateService\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, null);\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TranslateModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [TranslatePipe, TranslateDirective],\n      exports: [TranslatePipe, TranslateDirective]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TranslateModule, {\n    declarations: [TranslatePipe, TranslateDirective],\n    exports: [TranslatePipe, TranslateDirective]\n  });\n})();\n\nvar TranslateModule_1;\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TranslateStore as ɵa, TranslateModule, TranslateLoader, TranslateFakeLoader, USE_STORE, USE_DEFAULT_LANG, TranslateService, MissingTranslationHandler, FakeMissingTranslationHandler, TranslateParser, TranslateDefaultParser, TranslateCompiler, TranslateFakeCompiler, TranslateDirective, TranslatePipe };","map":{"version":3,"sources":["C:/Projects/safronGit/SAFRON/SAFRONCode/node_modules/@ngx-translate/core/__ivy_ngcc__/@ngx-translate/core.js"],"names":["ChangeDetectorRef","Directive","ElementRef","EventEmitter","Inject","Injectable","InjectionToken","Input","NgModule","Pipe","of","of$1","Observable","Observable$1","share","share$1","map","map$1","merge","merge$1","switchMap","switchMap$1","toArray","toArray$1","take","take$1","ɵngcc0","__decorate$1","__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","TranslateLoader","TranslateFakeLoader","getTranslation","lang","ɵfac","ɵTranslateFakeLoader_BaseFactory","TranslateFakeLoader_Factory","t","ɵɵgetInheritedFactory","ɵprov","ɵɵdefineInjectable","token","factory","isScheduler","value","schedule","isScheduler_2","isScheduler_1","commonjsGlobal","window","global","self","createCommonjsModule","fn","module","exports","__window","__self","WorkerGlobalScope","__global","_root","root_1","Error","root","isFunction","x","isFunction_2","isFunction_1","isArray_1","Array","isArray","isObject","isObject_2","isObject_1","errorObject_1","e","errorObject","tryCatchTarget","tryCatcher","apply","tryCatch","tryCatch_2","tryCatch_1","__extends$2","__extends","b","p","hasOwnProperty","__","constructor","prototype","create","UnsubscriptionError","_super","errors","call","err","toString","join","name","stack","message","UnsubscriptionError_2","UnsubscriptionError_1","Subscription","unsubscribe","closed","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","_a","index","len","remove","trial","flattenUnsubscriptionErrors","sub","concat","push","add","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","indexOf","splice","parent","empty","Subscription_2","reduce","errs","Subscription_1","next","error","complete","Observer","rxSubscriber","Symbol","for","$$rxSubscriber","rxSubscriber_1","rxSubscriber_2","__extends$1","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","destination","SafeSubscriber","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","Subscriber_2","_parentSubscriber","observerOrNext","context","bind","_context","__tryOrUnsub","__tryOrSetError","_this","wrappedComplete","Subscriber_1","toSubscriber","nextOrObserver","toSubscriber_2","toSubscriber_1","observable","getSymbolObservable","$$observable","observable_1","observable_2","observable_3","noop","noop_2","noop_1","pipe","fns","_i","pipeFromArray","pipe_2","piped","input","prev","pipeFromArray_1","pipe_1","Observable$2","Observable$$1","subscribe","_isScalar","_subscribe","lift","operator","observable$$1","source","sink","_trySubscribe","forEach","PromiseCtor","Rx","config","Promise","resolve","reject","operations","toPromise","Observable_2","Observable_1","__extends$3","ScalarObservable","scheduler","dispatch","state","done","ScalarObservable_2","ScalarObservable_1","__extends$4","EmptyObservable","arg","EmptyObservable_2","EmptyObservable_1","ArrayObservable","array","pop","count","ArrayObservable_2","ArrayObservable_1","of_1","of$2","isArrayLike_1","isArrayLike","isPromise","then","isPromise_2","isPromise_1","__extends$6","PromiseObservable","promise","setTimeout","dispatchNext","dispatchError","PromiseObservable_2","PromiseObservable_1","iterator","symbolIteratorPonyfill","root$$2","Set_1","Set","Map_1","Map","keys","getOwnPropertyNames","$$iterator","iterator_1","iterator_2","iterator_3","__extends$7","IteratorObservable","iterator$$1","getIterator","hasError","result","return","IteratorObservable_2","StringIterator","str","idx","charAt","undefined","ArrayIterator","arr","toLength","obj","TypeError","maxSafeInteger","Math","pow","o","isNaN","numberIsFinite","sign","floor","abs","isFinite","valueAsNumber","IteratorObservable_1","__extends$8","ArrayLikeObservable","arrayLike","ArrayLikeObservable_2","ArrayLikeObservable_1","Notification","kind","hasValue","observe","observer","do","accept","toObservable","throw","createNext","undefinedValueNotification","createError","createComplete","completeNotification","Notification_2","Notification_1","__extends$9","observeOn","delay","observeOnOperatorFunction","ObserveOnOperator","observeOn_2","ObserveOnSubscriber","ObserveOnOperator_1","notification","scheduleMessage","ObserveOnMessage","ObserveOnSubscriber_1","ObserveOnMessage_1","observeOn_1","__extends$5","FromObservable","ish","FromObservable_2","FromObservable_1","from_1","from","__extends$11","InnerSubscriber","outerValue","outerIndex","notifyNext","notifyError","notifyComplete","InnerSubscriber_2","InnerSubscriber_1","subscribeToResult","outerSubscriber","iterator$$2","item","obs","msg","subscribeToResult_2","subscribeToResult_1","__extends$12","OuterSubscriber","innerValue","innerIndex","innerSub","OuterSubscriber_2","OuterSubscriber_1","__extends$10","mergeMap","project","resultSelector","concurrent","Number","POSITIVE_INFINITY","mergeMapOperatorFunction","MergeMapOperator","mergeMap_2","MergeMapSubscriber","MergeMapOperator_1","hasCompleted","buffer","active","_tryNext","_innerSub","_notifyResultSelector","shift","MergeMapSubscriber_1","mergeMap_1","identity","identity_2","identity_1","mergeAll","mergeAll_2","mergeAll_1","concatAll","concatAll_2","concatAll_1","concat$1","observables","concat_2$2","concat_1","concat_3","__decorate$3","MissingTranslationHandler","FakeMissingTranslationHandler","handle","params","FakeMissingTranslationHandler_Factory","__decorate$4","TranslateCompiler","TranslateFakeCompiler","compile","compileTranslations","translations","ɵTranslateFakeCompiler_BaseFactory","TranslateFakeCompiler_Factory","equals","o1","o2","t1","t2","keySet","isDefined","isObject$1","mergeDeep","output","assign","__decorate$5","TranslateParser","TranslateDefaultParser","templateMatcher","interpolate","expr","interpolateString","interpolateFunction","getValue","split","replace","substring","ɵTranslateDefaultParser_BaseFactory","TranslateDefaultParser_Factory","TranslateStore","currentLang","defaultLang","langs","onTranslationChange","onLangChange","onDefaultLangChange","__decorate$2","__metadata","k","v","metadata","__param","paramIndex","decorator","USE_STORE","USE_DEFAULT_LANG","TranslateService","store","currentLoader","compiler","parser","missingTranslationHandler","useDefaultLang","isolate","pending","_onTranslationChange","_onLangChange","_onDefaultLangChange","_langs","_translations","_translationRequests","_defaultLang","_currentLang","setDefaultLang","retrieveTranslations","res","changeDefaultLang","getDefaultLang","use","changeLang","loadingTranslations","updateLangs","setTranslation","shouldMerge","emit","getLangs","addLangs","getParsedResult","interpolateParams","mergedObs","translateService","get","onComplete","onError","stream","event","instant","set","reloadLang","resetLang","getBrowserLang","navigator","browserLang","languages","language","browserLanguage","userLanguage","getBrowserCultureLang","browserCultureLang","TranslateService_Factory","ɵɵinject","Boolean","__decorate$6","__metadata$1","TranslateDirective","element","_ref","onTranslationChangeSub","checkNodes","onLangChangeSub","onDefaultLangChangeSub","translate","translateParams","currentParams","ngAfterViewChecked","forceUpdate","nodes","nativeElement","childNodes","setContent","node","nodeType","lastKey","content","getContent","trim","currentValue","originalContent","updateValue","lastParams","onTranslation","markForCheck","textContent","data","ngOnDestroy","TranslateDirective_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","inputs","String","__decorate$7","__metadata$2","TranslatePipe","transform","query","args","validArgs","JSON","parse","SyntaxError","_dispose","TranslatePipe_Factory","ɵpipe","ɵɵdefinePipe","pure","TranslateModule","TranslateModule_1","forRoot","ngModule","providers","loader","provide","useClass","useValue","forChild","TranslateModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","ngDevMode","ɵsetClassMetadata","selector","declarations","ngJitMode","ɵɵsetNgModuleScope","ɵa"],"mappings":"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CF,QAA/B,EAAyC,IAAzC,EAA+CjB,UAA/C,CAAP;AACH;;AACD,IAAIqB,UAAU,GAAGD,QAAjB;AAGA,IAAIE,UAAU,GAAG;AAChBF,EAAAA,QAAQ,EAAEC;AADM,CAAjB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,SAAT,GAAqB;AACjB,SAAOD,UAAU,CAACF,QAAX,CAAoB,CAApB,CAAP;AACH;;AACD,IAAII,WAAW,GAAGD,SAAlB;AAGA,IAAIE,WAAW,GAAG;AACjBF,EAAAA,SAAS,EAAEC;AADM,CAAlB;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,QAAT,GAAoB;AAChB,MAAIC,WAAW,GAAG,EAAlB;;AACA,OAAK,IAAI7M,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGvK,SAAS,CAACC,MAAhC,EAAwCsK,EAAE,EAA1C,EAA8C;AAC1C6M,IAAAA,WAAW,CAAC7M,EAAE,GAAG,CAAN,CAAX,GAAsBvK,S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","sourcesContent":["import { ChangeDetectorRef, Directive, ElementRef, EventEmitter, Inject, Injectable, InjectionToken, Input, NgModule, Pipe } from '@angular/core';\nimport { of as of$1 } from 'rxjs/observable/of';\nimport { Observable as Observable$1 } from 'rxjs/Observable';\nimport { share as share$1 } from 'rxjs/operators/share';\nimport { map as map$1 } from 'rxjs/operators/map';\nimport { merge as merge$1 } from 'rxjs/operators/merge';\nimport { switchMap as switchMap$1 } from 'rxjs/operators/switchMap';\nimport { toArray as toArray$1 } from 'rxjs/operators/toArray';\nimport { take as take$1 } from 'rxjs/operators/take';\n\nimport * as ɵngcc0 from '@angular/core';\nvar __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass TranslateLoader {\n}\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\nlet TranslateFakeLoader = class TranslateFakeLoader extends TranslateLoader {\n    getTranslation(lang) {\n        return of$1({});\n    }\n};\nTranslateFakeLoader.ɵfac = /*@__PURE__*/ function () { let ɵTranslateFakeLoader_BaseFactory; return function TranslateFakeLoader_Factory(t) { return (ɵTranslateFakeLoader_BaseFactory || (ɵTranslateFakeLoader_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TranslateFakeLoader)))(t || TranslateFakeLoader); }; }();\nTranslateFakeLoader.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TranslateFakeLoader, factory: function (t) { return TranslateFakeLoader.ɵfac(t); } });\n\nfunction isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\nvar isScheduler_2 = isScheduler;\n\n\nvar isScheduler_1 = {\n\tisScheduler: isScheduler_2\n};\n\nvar commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n\n\n\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\nvar __window = typeof window !== 'undefined' && window;\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nvar __global = typeof commonjsGlobal !== 'undefined' && commonjsGlobal;\nvar _root = __window || __global || __self;\nvar root_1 = _root;\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\n\n\nvar root = {\n\troot: root_1\n};\n\nfunction isFunction(x) {\n    return typeof x === 'function';\n}\nvar isFunction_2 = isFunction;\n\n\nvar isFunction_1 = {\n\tisFunction: isFunction_2\n};\n\nvar isArray_1 = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n\n\nvar isArray = {\n\tisArray: isArray_1\n};\n\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nvar isObject_2 = isObject;\n\n\nvar isObject_1 = {\n\tisObject: isObject_2\n};\n\n// typeof any so that it we don't have to cast when comparing a result to the error object\nvar errorObject_1 = { e: {} };\n\n\nvar errorObject = {\n\terrorObject: errorObject_1\n};\n\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject.errorObject.e = e;\n        return errorObject.errorObject;\n    }\n}\nfunction tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\nvar tryCatch_2 = tryCatch;\n\n\n\nvar tryCatch_1 = {\n\ttryCatch: tryCatch_2\n};\n\nvar __extends$2 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = (function (_super) {\n    __extends$2(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error));\nvar UnsubscriptionError_2 = UnsubscriptionError;\n\n\nvar UnsubscriptionError_1 = {\n\tUnsubscriptionError: UnsubscriptionError_2\n};\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction_1.isFunction(_unsubscribe)) {\n            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject.errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject.errorObject.e.errors) : [errorObject.errorObject.e]);\n            }\n        }\n        if (isArray.isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject_1.isObject(sub)) {\n                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject.errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject.errorObject.e;\n                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nvar Subscription_2 = Subscription;\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);\n}\n\n\nvar Subscription_1 = {\n\tSubscription: Subscription_2\n};\n\nvar empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) { throw err; },\n    complete: function () { }\n};\n\n\nvar Observer = {\n\tempty: empty\n};\n\nvar rxSubscriber = createCommonjsModule(function (module, exports) {\nvar Symbol = root.root.Symbol;\nexports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexports.$$rxSubscriber = exports.rxSubscriber;\n\n});\n\nvar rxSubscriber_1 = rxSubscriber.rxSubscriber;\nvar rxSubscriber_2 = rxSubscriber.$$rxSubscriber;\n\nvar __extends$1 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = (function (_super) {\n    __extends$1(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = Observer.empty;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = Observer.empty;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        this.destination = destinationOrNext;\n                        this.destination.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriber.rxSubscriber] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription_1.Subscription));\nvar Subscriber_2 = Subscriber;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = (function (_super) {\n    __extends$1(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = this;\n        if (isFunction_1.isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== Observer.empty) {\n                context = Object.create(observerOrNext);\n                if (isFunction_1.isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._error) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            }\n            else {\n                _parentSubscriber.syncErrorValue = err;\n                _parentSubscriber.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\n\n\nvar Subscriber_1 = {\n\tSubscriber: Subscriber_2\n};\n\nfunction toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriber.rxSubscriber]) {\n            return nextOrObserver[rxSubscriber.rxSubscriber]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber_1.Subscriber(Observer.empty);\n    }\n    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n}\nvar toSubscriber_2 = toSubscriber;\n\n\nvar toSubscriber_1 = {\n\ttoSubscriber: toSubscriber_2\n};\n\nvar observable = createCommonjsModule(function (module, exports) {\nfunction getSymbolObservable(context) {\n    var $$observable;\n    var Symbol = context.Symbol;\n    if (typeof Symbol === 'function') {\n        if (Symbol.observable) {\n            $$observable = Symbol.observable;\n        }\n        else {\n            $$observable = Symbol('observable');\n            Symbol.observable = $$observable;\n        }\n    }\n    else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nexports.getSymbolObservable = getSymbolObservable;\nexports.observable = getSymbolObservable(root.root);\n/**\n * @deprecated use observable instead\n */\nexports.$$observable = exports.observable;\n\n});\n\nvar observable_1 = observable.getSymbolObservable;\nvar observable_2 = observable.observable;\nvar observable_3 = observable.$$observable;\n\n/* tslint:disable:no-empty */\nfunction noop() { }\nvar noop_2 = noop;\n\n\nvar noop_1 = {\n\tnoop: noop_2\n};\n\n/* tslint:enable:max-line-length */\nfunction pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i - 0] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\nvar pipe_2 = pipe;\n/* @internal */\nfunction pipeFromArray(fns) {\n    if (!fns) {\n        return noop_1.noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\nvar pipeFromArray_1 = pipeFromArray;\n\n\nvar pipe_1 = {\n\tpipe: pipe_2,\n\tpipeFromArray: pipeFromArray_1\n};\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable$2 = (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable$$1(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable$$1.prototype.lift = function (operator) {\n        var observable$$1 = new Observable$$1();\n        observable$$1.source = this;\n        observable$$1.operator = operator;\n        return observable$$1;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable$$1.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable$$1.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable$$1.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root.root.Rx && root.root.Rx.config && root.root.Rx.config.Promise) {\n                PromiseCtor = root.root.Rx.config.Promise;\n            }\n            else if (root.root.Promise) {\n                PromiseCtor = root.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                }\n                else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    Observable$$1.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable$$1.prototype[observable.observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable$$1.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i - 0] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipe_1.pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable$$1.prototype.toPromise = function (PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root.root.Rx && root.root.Rx.config && root.root.Rx.config.Promise) {\n                PromiseCtor = root.root.Rx.config.Promise;\n            }\n            else if (root.root.Promise) {\n                PromiseCtor = root.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable$$1.create = function (subscribe) {\n        return new Observable$$1(subscribe);\n    };\n    return Observable$$1;\n}());\nvar Observable_2 = Observable$2;\n\n\nvar Observable_1 = {\n\tObservable: Observable_2\n};\n\nvar __extends$3 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ScalarObservable = (function (_super) {\n    __extends$3(ScalarObservable, _super);\n    function ScalarObservable(value, scheduler) {\n        _super.call(this);\n        this.value = value;\n        this.scheduler = scheduler;\n        this._isScalar = true;\n        if (scheduler) {\n            this._isScalar = false;\n        }\n    }\n    ScalarObservable.create = function (value, scheduler) {\n        return new ScalarObservable(value, scheduler);\n    };\n    ScalarObservable.dispatch = function (state) {\n        var done = state.done, value = state.value, subscriber = state.subscriber;\n        if (done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        state.done = true;\n        this.schedule(state);\n    };\n    ScalarObservable.prototype._subscribe = function (subscriber) {\n        var value = this.value;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ScalarObservable.dispatch, 0, {\n                done: false, value: value, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.next(value);\n            if (!subscriber.closed) {\n                subscriber.complete();\n            }\n        }\n    };\n    return ScalarObservable;\n}(Observable_1.Observable));\nvar ScalarObservable_2 = ScalarObservable;\n\n\nvar ScalarObservable_1 = {\n\tScalarObservable: ScalarObservable_2\n};\n\nvar __extends$4 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar EmptyObservable = (function (_super) {\n    __extends$4(EmptyObservable, _super);\n    function EmptyObservable(scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits a complete notification.\n     *\n     * <span class=\"informal\">Just emits 'complete', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/empty.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the complete notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then complete.</caption>\n     * var result = Rx.Observable.empty().startWith(7);\n     * result.subscribe(x => console.log(x));\n     *\n     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n     * );\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following to the console:\n     * // x is equal to the count on the interval eg(0,1,2,3,...)\n     * // x will occur every 1000ms\n     * // if x % 2 is equal to 1 print abc\n     * // if x % 2 is not equal to 1 nothing will be output\n     *\n     * @see {@link create}\n     * @see {@link never}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the complete notification.\n     * @return {Observable} An \"empty\" Observable: emits only the complete\n     * notification.\n     * @static true\n     * @name empty\n     * @owner Observable\n     */\n    EmptyObservable.create = function (scheduler) {\n        return new EmptyObservable(scheduler);\n    };\n    EmptyObservable.dispatch = function (arg) {\n        var subscriber = arg.subscriber;\n        subscriber.complete();\n    };\n    EmptyObservable.prototype._subscribe = function (subscriber) {\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });\n        }\n        else {\n            subscriber.complete();\n        }\n    };\n    return EmptyObservable;\n}(Observable_1.Observable));\nvar EmptyObservable_2 = EmptyObservable;\n\n\nvar EmptyObservable_1 = {\n\tEmptyObservable: EmptyObservable_2\n};\n\nvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayObservable = (function (_super) {\n    __extends(ArrayObservable, _super);\n    function ArrayObservable(array, scheduler) {\n        _super.call(this);\n        this.array = array;\n        this.scheduler = scheduler;\n        if (!scheduler && array.length === 1) {\n            this._isScalar = true;\n            this.value = array[0];\n        }\n    }\n    ArrayObservable.create = function (array, scheduler) {\n        return new ArrayObservable(array, scheduler);\n    };\n    /**\n     * Creates an Observable that emits some values you specify as arguments,\n     * immediately one after the other, and then emits a complete notification.\n     *\n     * <span class=\"informal\">Emits the arguments you provide, then completes.\n     * </span>\n     *\n     * <img src=\"./img/of.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the arguments given, and the complete notification thereafter. It can\n     * be used for composing with other Observables, such as with {@link concat}.\n     * By default, it uses a `null` IScheduler, which means the `next`\n     * notifications are sent synchronously, although with a different IScheduler\n     * it is possible to determine when those notifications will be delivered.\n     *\n     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n     * var numbers = Rx.Observable.of(10, 20, 30);\n     * var letters = Rx.Observable.of('a', 'b', 'c');\n     * var interval = Rx.Observable.interval(1000);\n     * var result = numbers.concat(letters).concat(interval);\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link throw}\n     *\n     * @param {...T} values Arguments that represent `next` values to be emitted.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the `next` notifications.\n     * @return {Observable<T>} An Observable that emits each given input value.\n     * @static true\n     * @name of\n     * @owner Observable\n     */\n    ArrayObservable.of = function () {\n        var array = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            array[_i - 0] = arguments[_i];\n        }\n        var scheduler = array[array.length - 1];\n        if (isScheduler_1.isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len > 1) {\n            return new ArrayObservable(array, scheduler);\n        }\n        else if (len === 1) {\n            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);\n        }\n        else {\n            return new EmptyObservable_1.EmptyObservable(scheduler);\n        }\n    };\n    ArrayObservable.dispatch = function (state) {\n        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(array[index]);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    ArrayObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var array = this.array;\n        var count = array.length;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n                array: array, index: index, count: count, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < count && !subscriber.closed; i++) {\n                subscriber.next(array[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayObservable;\n}(Observable_1.Observable));\nvar ArrayObservable_2 = ArrayObservable;\n\n\nvar ArrayObservable_1 = {\n\tArrayObservable: ArrayObservable_2\n};\n\nvar of_1 = ArrayObservable_1.ArrayObservable.of;\n\n\nvar of$2 = {\n\tof: of_1\n};\n\nvar isArrayLike_1 = (function (x) { return x && typeof x.length === 'number'; });\n\n\nvar isArrayLike = {\n\tisArrayLike: isArrayLike_1\n};\n\nfunction isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\nvar isPromise_2 = isPromise;\n\n\nvar isPromise_1 = {\n\tisPromise: isPromise_2\n};\n\nvar __extends$6 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar PromiseObservable = (function (_super) {\n    __extends$6(PromiseObservable, _super);\n    function PromiseObservable(promise, scheduler) {\n        _super.call(this);\n        this.promise = promise;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Converts a Promise to an Observable.\n     *\n     * <span class=\"informal\">Returns an Observable that just emits the Promise's\n     * resolved value, then completes.</span>\n     *\n     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n     * Observable. If the Promise resolves with a value, the output Observable\n     * emits that resolved value as a `next`, and then completes. If the Promise\n     * is rejected, then the output Observable emits the corresponding Error.\n     *\n     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     *\n     * @param {PromiseLike<T>} promise The promise to be converted.\n     * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n     * the delivery of the resolved value (or the rejection).\n     * @return {Observable<T>} An Observable which wraps the Promise.\n     * @static true\n     * @name fromPromise\n     * @owner Observable\n     */\n    PromiseObservable.create = function (promise, scheduler) {\n        return new PromiseObservable(promise, scheduler);\n    };\n    PromiseObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var promise = this.promise;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    subscriber.next(this.value);\n                    subscriber.complete();\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.next(value);\n                        subscriber.complete();\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.error(err);\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root.root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n        else {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root.root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n    };\n    return PromiseObservable;\n}(Observable_1.Observable));\nvar PromiseObservable_2 = PromiseObservable;\nfunction dispatchNext(arg) {\n    var value = arg.value, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n    }\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.error(err);\n    }\n}\n\n\nvar PromiseObservable_1 = {\n\tPromiseObservable: PromiseObservable_2\n};\n\nvar iterator = createCommonjsModule(function (module, exports) {\nfunction symbolIteratorPonyfill(root$$2) {\n    var Symbol = root$$2.Symbol;\n    if (typeof Symbol === 'function') {\n        if (!Symbol.iterator) {\n            Symbol.iterator = Symbol('iterator polyfill');\n        }\n        return Symbol.iterator;\n    }\n    else {\n        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n        var Set_1 = root$$2.Set;\n        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {\n            return '@@iterator';\n        }\n        var Map_1 = root$$2.Map;\n        // required for compatability with es6-shim\n        if (Map_1) {\n            var keys = Object.getOwnPropertyNames(Map_1.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                var key = keys[i];\n                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {\n                    return key;\n                }\n            }\n        }\n        return '@@iterator';\n    }\n}\nexports.symbolIteratorPonyfill = symbolIteratorPonyfill;\nexports.iterator = symbolIteratorPonyfill(root.root);\n/**\n * @deprecated use iterator instead\n */\nexports.$$iterator = exports.iterator;\n\n});\n\nvar iterator_1 = iterator.symbolIteratorPonyfill;\nvar iterator_2 = iterator.iterator;\nvar iterator_3 = iterator.$$iterator;\n\nvar __extends$7 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IteratorObservable = (function (_super) {\n    __extends$7(IteratorObservable, _super);\n    function IteratorObservable(iterator$$1, scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n        if (iterator$$1 == null) {\n            throw new Error('iterator cannot be null.');\n        }\n        this.iterator = getIterator(iterator$$1);\n    }\n    IteratorObservable.create = function (iterator$$1, scheduler) {\n        return new IteratorObservable(iterator$$1, scheduler);\n    };\n    IteratorObservable.dispatch = function (state) {\n        var index = state.index, hasError = state.hasError, iterator$$1 = state.iterator, subscriber = state.subscriber;\n        if (hasError) {\n            subscriber.error(state.error);\n            return;\n        }\n        var result = iterator$$1.next();\n        if (result.done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(result.value);\n        state.index = index + 1;\n        if (subscriber.closed) {\n            if (typeof iterator$$1.return === 'function') {\n                iterator$$1.return();\n            }\n            return;\n        }\n        this.schedule(state);\n    };\n    IteratorObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, iterator$$1 = _a.iterator, scheduler = _a.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(IteratorObservable.dispatch, 0, {\n                index: index, iterator: iterator$$1, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                var result = iterator$$1.next();\n                if (result.done) {\n                    subscriber.complete();\n                    break;\n                }\n                else {\n                    subscriber.next(result.value);\n                }\n                if (subscriber.closed) {\n                    if (typeof iterator$$1.return === 'function') {\n                        iterator$$1.return();\n                    }\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return IteratorObservable;\n}(Observable_1.Observable));\nvar IteratorObservable_2 = IteratorObservable;\nvar StringIterator = (function () {\n    function StringIterator(str, idx, len) {\n        if (idx === void 0) { idx = 0; }\n        if (len === void 0) { len = str.length; }\n        this.str = str;\n        this.idx = idx;\n        this.len = len;\n    }\n    StringIterator.prototype[iterator.iterator] = function () { return (this); };\n    StringIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.str.charAt(this.idx++)\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return StringIterator;\n}());\nvar ArrayIterator = (function () {\n    function ArrayIterator(arr, idx, len) {\n        if (idx === void 0) { idx = 0; }\n        if (len === void 0) { len = toLength(arr); }\n        this.arr = arr;\n        this.idx = idx;\n        this.len = len;\n    }\n    ArrayIterator.prototype[iterator.iterator] = function () { return this; };\n    ArrayIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.arr[this.idx++]\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return ArrayIterator;\n}());\nfunction getIterator(obj) {\n    var i = obj[iterator.iterator];\n    if (!i && typeof obj === 'string') {\n        return new StringIterator(obj);\n    }\n    if (!i && obj.length !== undefined) {\n        return new ArrayIterator(obj);\n    }\n    if (!i) {\n        throw new TypeError('object is not iterable');\n    }\n    return obj[iterator.iterator]();\n}\nvar maxSafeInteger = Math.pow(2, 53) - 1;\nfunction toLength(o) {\n    var len = +o.length;\n    if (isNaN(len)) {\n        return 0;\n    }\n    if (len === 0 || !numberIsFinite(len)) {\n        return len;\n    }\n    len = sign(len) * Math.floor(Math.abs(len));\n    if (len <= 0) {\n        return 0;\n    }\n    if (len > maxSafeInteger) {\n        return maxSafeInteger;\n    }\n    return len;\n}\nfunction numberIsFinite(value) {\n    return typeof value === 'number' && root.root.isFinite(value);\n}\nfunction sign(value) {\n    var valueAsNumber = +value;\n    if (valueAsNumber === 0) {\n        return valueAsNumber;\n    }\n    if (isNaN(valueAsNumber)) {\n        return valueAsNumber;\n    }\n    return valueAsNumber < 0 ? -1 : 1;\n}\n\n\nvar IteratorObservable_1 = {\n\tIteratorObservable: IteratorObservable_2\n};\n\nvar __extends$8 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayLikeObservable = (function (_super) {\n    __extends$8(ArrayLikeObservable, _super);\n    function ArrayLikeObservable(arrayLike, scheduler) {\n        _super.call(this);\n        this.arrayLike = arrayLike;\n        this.scheduler = scheduler;\n        if (!scheduler && arrayLike.length === 1) {\n            this._isScalar = true;\n            this.value = arrayLike[0];\n        }\n    }\n    ArrayLikeObservable.create = function (arrayLike, scheduler) {\n        var length = arrayLike.length;\n        if (length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else if (length === 1) {\n            return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);\n        }\n        else {\n            return new ArrayLikeObservable(arrayLike, scheduler);\n        }\n    };\n    ArrayLikeObservable.dispatch = function (state) {\n        var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;\n        if (subscriber.closed) {\n            return;\n        }\n        if (index >= length) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(arrayLike[index]);\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    ArrayLikeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;\n        var length = arrayLike.length;\n        if (scheduler) {\n            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < length && !subscriber.closed; i++) {\n                subscriber.next(arrayLike[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayLikeObservable;\n}(Observable_1.Observable));\nvar ArrayLikeObservable_2 = ArrayLikeObservable;\n\n\nvar ArrayLikeObservable_1 = {\n\tArrayLikeObservable: ArrayLikeObservable_2\n};\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nvar Notification = (function () {\n    function Notification(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.error);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.error);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        }\n        else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return Observable_1.Observable.of(this.value);\n            case 'E':\n                return Observable_1.Observable.throw(this.error);\n            case 'C':\n                return Observable_1.Observable.empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return Notification.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     */\n    Notification.createComplete = function () {\n        return Notification.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}());\nvar Notification_2 = Notification;\n\n\nvar Notification_1 = {\n\tNotification: Notification_2\n};\n\nvar __extends$9 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nfunction observeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nvar observeOn_2 = observeOn;\nvar ObserveOnOperator = (function () {\n    function ObserveOnOperator(scheduler, delay) {\n        if (delay === void 0) { delay = 0; }\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    };\n    return ObserveOnOperator;\n}());\nvar ObserveOnOperator_1 = ObserveOnOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ObserveOnSubscriber = (function (_super) {\n    __extends$9(ObserveOnSubscriber, _super);\n    function ObserveOnSubscriber(destination, scheduler, delay) {\n        if (delay === void 0) { delay = 0; }\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnSubscriber.dispatch = function (arg) {\n        var notification = arg.notification, destination = arg.destination;\n        notification.observe(destination);\n        this.unsubscribe();\n    };\n    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    };\n    ObserveOnSubscriber.prototype._next = function (value) {\n        this.scheduleMessage(Notification_1.Notification.createNext(value));\n    };\n    ObserveOnSubscriber.prototype._error = function (err) {\n        this.scheduleMessage(Notification_1.Notification.createError(err));\n    };\n    ObserveOnSubscriber.prototype._complete = function () {\n        this.scheduleMessage(Notification_1.Notification.createComplete());\n    };\n    return ObserveOnSubscriber;\n}(Subscriber_1.Subscriber));\nvar ObserveOnSubscriber_1 = ObserveOnSubscriber;\nvar ObserveOnMessage = (function () {\n    function ObserveOnMessage(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n    return ObserveOnMessage;\n}());\nvar ObserveOnMessage_1 = ObserveOnMessage;\n\n\nvar observeOn_1 = {\n\tobserveOn: observeOn_2,\n\tObserveOnOperator: ObserveOnOperator_1,\n\tObserveOnSubscriber: ObserveOnSubscriber_1,\n\tObserveOnMessage: ObserveOnMessage_1\n};\n\nvar __extends$5 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n\n\n\n\n\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromObservable = (function (_super) {\n    __extends$5(FromObservable, _super);\n    function FromObservable(ish, scheduler) {\n        _super.call(this, null);\n        this.ish = ish;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable from an Array, an array-like object, a Promise, an\n     * iterable object, or an Observable-like object.\n     *\n     * <span class=\"informal\">Converts almost anything to an Observable.</span>\n     *\n     * <img src=\"./img/from.png\" width=\"100%\">\n     *\n     * Convert various other objects and data types into Observables. `from`\n     * converts a Promise or an array-like or an\n     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n     * object into an Observable that emits the items in that promise or array or\n     * iterable. A String, in this context, is treated as an array of characters.\n     * Observable-like objects (contains a function named with the ES2015 Symbol\n     * for Observable) can also be converted through this operator.\n     *\n     * @example <caption>Converts an array to an Observable</caption>\n     * var array = [10, 20, 30];\n     * var result = Rx.Observable.from(array);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 10 20 30\n     *\n     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n     * function* generateDoubles(seed) {\n     *   var i = seed;\n     *   while (true) {\n     *     yield i;\n     *     i = 2 * i; // double it\n     *   }\n     * }\n     *\n     * var iterator = generateDoubles(3);\n     * var result = Rx.Observable.from(iterator).take(10);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 3 6 12 24 48 96 192 384 768 1536\n     *\n     * @see {@link create}\n     * @see {@link fromEvent}\n     * @see {@link fromEventPattern}\n     * @see {@link fromPromise}\n     *\n     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n     * Observable-like, an Array, an iterable or an array-like object to be\n     * converted.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * emissions of values.\n     * @return {Observable<T>} The Observable whose values are originally from the\n     * input object that was converted.\n     * @static true\n     * @name from\n     * @owner Observable\n     */\n    FromObservable.create = function (ish, scheduler) {\n        if (ish != null) {\n            if (typeof ish[observable.observable] === 'function') {\n                if (ish instanceof Observable_1.Observable && !scheduler) {\n                    return ish;\n                }\n                return new FromObservable(ish, scheduler);\n            }\n            else if (isArray.isArray(ish)) {\n                return new ArrayObservable_1.ArrayObservable(ish, scheduler);\n            }\n            else if (isPromise_1.isPromise(ish)) {\n                return new PromiseObservable_1.PromiseObservable(ish, scheduler);\n            }\n            else if (typeof ish[iterator.iterator] === 'function' || typeof ish === 'string') {\n                return new IteratorObservable_1.IteratorObservable(ish, scheduler);\n            }\n            else if (isArrayLike.isArrayLike(ish)) {\n                return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);\n            }\n        }\n        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n    };\n    FromObservable.prototype._subscribe = function (subscriber) {\n        var ish = this.ish;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            return ish[observable.observable]().subscribe(subscriber);\n        }\n        else {\n            return ish[observable.observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));\n        }\n    };\n    return FromObservable;\n}(Observable_1.Observable));\nvar FromObservable_2 = FromObservable;\n\n\nvar FromObservable_1 = {\n\tFromObservable: FromObservable_2\n};\n\nvar from_1 = FromObservable_1.FromObservable.create;\n\n\nvar from = {\n\tfrom: from_1\n};\n\nvar __extends$11 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerSubscriber = (function (_super) {\n    __extends$11(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        _super.call(this);\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n        this.index = 0;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber_1.Subscriber));\nvar InnerSubscriber_2 = InnerSubscriber;\n\n\nvar InnerSubscriber_1 = {\n\tInnerSubscriber: InnerSubscriber_2\n};\n\nfunction subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    if (destination.closed) {\n        return null;\n    }\n    if (result instanceof Observable_1.Observable) {\n        if (result._isScalar) {\n            destination.next(result.value);\n            destination.complete();\n            return null;\n        }\n        else {\n            destination.syncErrorThrowable = true;\n            return result.subscribe(destination);\n        }\n    }\n    else if (isArrayLike.isArrayLike(result)) {\n        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {\n            destination.next(result[i]);\n        }\n        if (!destination.closed) {\n            destination.complete();\n        }\n    }\n    else if (isPromise_1.isPromise(result)) {\n        result.then(function (value) {\n            if (!destination.closed) {\n                destination.next(value);\n                destination.complete();\n            }\n        }, function (err) { return destination.error(err); })\n            .then(null, function (err) {\n            // Escaping the Promise trap: globally throw unhandled errors\n            root.root.setTimeout(function () { throw err; });\n        });\n        return destination;\n    }\n    else if (result && typeof result[iterator.iterator] === 'function') {\n        var iterator$$2 = result[iterator.iterator]();\n        do {\n            var item = iterator$$2.next();\n            if (item.done) {\n                destination.complete();\n                break;\n            }\n            destination.next(item.value);\n            if (destination.closed) {\n                break;\n            }\n        } while (true);\n    }\n    else if (result && typeof result[observable.observable] === 'function') {\n        var obs = result[observable.observable]();\n        if (typeof obs.subscribe !== 'function') {\n            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n        }\n        else {\n            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n        }\n    }\n    else {\n        var value = isObject_1.isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = (\"You provided \" + value + \" where a stream was expected.\")\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        destination.error(new TypeError(msg));\n    }\n    return null;\n}\nvar subscribeToResult_2 = subscribeToResult;\n\n\nvar subscribeToResult_1 = {\n\tsubscribeToResult: subscribeToResult_2\n};\n\nvar __extends$12 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar OuterSubscriber = (function (_super) {\n    __extends$12(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        _super.apply(this, arguments);\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber_1.Subscriber));\nvar OuterSubscriber_2 = OuterSubscriber;\n\n\nvar OuterSubscriber_1 = {\n\tOuterSubscriber: OuterSubscriber_2\n};\n\nvar __extends$10 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nfunction mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return function mergeMapOperatorFunction(source) {\n        if (typeof resultSelector === 'number') {\n            concurrent = resultSelector;\n            resultSelector = null;\n        }\n        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));\n    };\n}\nvar mergeMap_2 = mergeMap;\nvar MergeMapOperator = (function () {\n    function MergeMapOperator(project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\nvar MergeMapOperator_1 = MergeMapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapSubscriber = (function (_super) {\n    __extends$10(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nvar MergeMapSubscriber_1 = MergeMapSubscriber;\n\n\nvar mergeMap_1 = {\n\tmergeMap: mergeMap_2,\n\tMergeMapOperator: MergeMapOperator_1,\n\tMergeMapSubscriber: MergeMapSubscriber_1\n};\n\nfunction identity(x) {\n    return x;\n}\nvar identity_2 = identity;\n\n\nvar identity_1 = {\n\tidentity: identity_2\n};\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nfunction mergeAll(concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeMap_1.mergeMap(identity_1.identity, null, concurrent);\n}\nvar mergeAll_2 = mergeAll;\n\n\nvar mergeAll_1 = {\n\tmergeAll: mergeAll_2\n};\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nfunction concatAll() {\n    return mergeAll_1.mergeAll(1);\n}\nvar concatAll_2 = concatAll;\n\n\nvar concatAll_1 = {\n\tconcatAll: concatAll_2\n};\n\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nfunction concat$1() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    if (observables.length === 1 || (observables.length === 2 && isScheduler_1.isScheduler(observables[1]))) {\n        return from.from(observables[0]);\n    }\n    return concatAll_1.concatAll()(of$2.of.apply(void 0, observables));\n}\nvar concat_2$2 = concat$1;\n\n\nvar concat_1 = {\n\tconcat: concat_2$2\n};\n\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function (source) { return source.lift.call(concat_1.concat.apply(void 0, [source].concat(observables))); };\n}\nvar concat_3 = concat;\n\nvar __decorate$3 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass MissingTranslationHandler {\n}\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\nlet FakeMissingTranslationHandler = class FakeMissingTranslationHandler {\n    handle(params) {\n        return params.key;\n    }\n};\nFakeMissingTranslationHandler.ɵfac = function FakeMissingTranslationHandler_Factory(t) { return new (t || FakeMissingTranslationHandler)(); };\nFakeMissingTranslationHandler.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: FakeMissingTranslationHandler, factory: function (t) { return FakeMissingTranslationHandler.ɵfac(t); } });\n\nvar __decorate$4 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass TranslateCompiler {\n}\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\nlet TranslateFakeCompiler = class TranslateFakeCompiler extends TranslateCompiler {\n    compile(value, lang) {\n        return value;\n    }\n    compileTranslations(translations, lang) {\n        return translations;\n    }\n};\nTranslateFakeCompiler.ɵfac = /*@__PURE__*/ function () { let ɵTranslateFakeCompiler_BaseFactory; return function TranslateFakeCompiler_Factory(t) { return (ɵTranslateFakeCompiler_BaseFactory || (ɵTranslateFakeCompiler_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TranslateFakeCompiler)))(t || TranslateFakeCompiler); }; }();\nTranslateFakeCompiler.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TranslateFakeCompiler, factory: function (t) { return TranslateFakeCompiler.ɵfac(t); } });\n\n/* tslint:disable */\n/**\n * @name equals\n *\n * @description\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param {*} o1 Object or value to compare.\n * @param {*} o2 Object or value to compare.\n * @returns {boolean} True if arguments are equal.\n */\nfunction equals(o1, o2) {\n    if (o1 === o2)\n        return true;\n    if (o1 === null || o2 === null)\n        return false;\n    if (o1 !== o1 && o2 !== o2)\n        return true; // NaN === NaN\n    let t1 = typeof o1, t2 = typeof o2, length, key, keySet;\n    if (t1 == t2 && t1 == 'object') {\n        if (Array.isArray(o1)) {\n            if (!Array.isArray(o2))\n                return false;\n            if ((length = o1.length) == o2.length) {\n                for (key = 0; key < length; key++) {\n                    if (!equals(o1[key], o2[key]))\n                        return false;\n                }\n                return true;\n            }\n        }\n        else {\n            if (Array.isArray(o2)) {\n                return false;\n            }\n            keySet = Object.create(null);\n            for (key in o1) {\n                if (!equals(o1[key], o2[key])) {\n                    return false;\n                }\n                keySet[key] = true;\n            }\n            for (key in o2) {\n                if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}\n/* tslint:enable */\nfunction isDefined(value) {\n    return typeof value !== 'undefined' && value !== null;\n}\nfunction isObject$1(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\nfunction mergeDeep(target, source) {\n    let output = Object.assign({}, target);\n    if (isObject$1(target) && isObject$1(source)) {\n        Object.keys(source).forEach((key) => {\n            if (isObject$1(source[key])) {\n                if (!(key in target)) {\n                    Object.assign(output, { [key]: source[key] });\n                }\n                else {\n                    output[key] = mergeDeep(target[key], source[key]);\n                }\n            }\n            else {\n                Object.assign(output, { [key]: source[key] });\n            }\n        });\n    }\n    return output;\n}\n\nvar __decorate$5 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass TranslateParser {\n}\nlet TranslateDefaultParser = class TranslateDefaultParser extends TranslateParser {\n    constructor() {\n        super(...arguments);\n        this.templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\n    }\n    interpolate(expr, params) {\n        let result;\n        if (typeof expr === 'string') {\n            result = this.interpolateString(expr, params);\n        }\n        else if (typeof expr === 'function') {\n            result = this.interpolateFunction(expr, params);\n        }\n        else {\n            // this should not happen, but an unrelated TranslateService test depends on it\n            result = expr;\n        }\n        return result;\n    }\n    getValue(target, key) {\n        let keys = key.split('.');\n        key = '';\n        do {\n            key += keys.shift();\n            if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n                target = target[key];\n                key = '';\n            }\n            else if (!keys.length) {\n                target = undefined;\n            }\n            else {\n                key += '.';\n            }\n        } while (keys.length);\n        return target;\n    }\n    interpolateFunction(fn, params) {\n        return fn(params);\n    }\n    interpolateString(expr, params) {\n        if (!params) {\n            return expr;\n        }\n        return expr.replace(this.templateMatcher, (substring, b) => {\n            let r = this.getValue(params, b);\n            return isDefined(r) ? r : substring;\n        });\n    }\n};\nTranslateDefaultParser.ɵfac = /*@__PURE__*/ function () { let ɵTranslateDefaultParser_BaseFactory; return function TranslateDefaultParser_Factory(t) { return (ɵTranslateDefaultParser_BaseFactory || (ɵTranslateDefaultParser_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TranslateDefaultParser)))(t || TranslateDefaultParser); }; }();\nTranslateDefaultParser.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TranslateDefaultParser, factory: function (t) { return TranslateDefaultParser.ɵfac(t); } });\n\nclass TranslateStore {\n    constructor() {\n        /**\n         * The lang currently used\n         * @type {string}\n         */\n        this.currentLang = this.defaultLang;\n        /**\n         * a list of translations per lang\n         * @type {{}}\n         */\n        this.translations = {};\n        /**\n         * an array of langs\n         * @type {Array}\n         */\n        this.langs = [];\n        /**\n         * An EventEmitter to listen to translation change events\n         * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n         *     // do something\n         * });\n         * @type {EventEmitter<TranslationChangeEvent>}\n         */\n        this.onTranslationChange = new EventEmitter();\n        /**\n         * An EventEmitter to listen to lang change events\n         * onLangChange.subscribe((params: LangChangeEvent) => {\n         *     // do something\n         * });\n         * @type {EventEmitter<LangChangeEvent>}\n         */\n        this.onLangChange = new EventEmitter();\n        /**\n         * An EventEmitter to listen to default lang change events\n         * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n         *     // do something\n         * });\n         * @type {EventEmitter<DefaultLangChangeEvent>}\n         */\n        this.onDefaultLangChange = new EventEmitter();\n    }\n}\n\nvar __decorate$2 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nconst USE_STORE = new InjectionToken('USE_STORE');\nconst USE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\nlet TranslateService = class TranslateService {\n    /**\n     *\n     * @param store an instance of the store (that is supposed to be unique)\n     * @param currentLoader An instance of the loader currently used\n     * @param compiler An instance of the compiler currently used\n     * @param parser An instance of the parser currently used\n     * @param missingTranslationHandler A handler for missing translations.\n     * @param isolate whether this service should use the store or not\n     * @param useDefaultLang whether we should use default language translation when current language translation is missing.\n     */\n    constructor(store, currentLoader, compiler, parser, missingTranslationHandler, useDefaultLang = true, isolate = false) {\n        this.store = store;\n        this.currentLoader = currentLoader;\n        this.compiler = compiler;\n        this.parser = parser;\n        this.missingTranslationHandler = missingTranslationHandler;\n        this.useDefaultLang = useDefaultLang;\n        this.isolate = isolate;\n        this.pending = false;\n        this._onTranslationChange = new EventEmitter();\n        this._onLangChange = new EventEmitter();\n        this._onDefaultLangChange = new EventEmitter();\n        this._langs = [];\n        this._translations = {};\n        this._translationRequests = {};\n    }\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<TranslationChangeEvent>}\n     */\n    get onTranslationChange() {\n        return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n    }\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<LangChangeEvent>}\n     */\n    get onLangChange() {\n        return this.isolate ? this._onLangChange : this.store.onLangChange;\n    }\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {EventEmitter<DefaultLangChangeEvent>}\n     */\n    get onDefaultLangChange() {\n        return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n    }\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     */\n    get defaultLang() {\n        return this.isolate ? this._defaultLang : this.store.defaultLang;\n    }\n    set defaultLang(defaultLang) {\n        if (this.isolate) {\n            this._defaultLang = defaultLang;\n        }\n        else {\n            this.store.defaultLang = defaultLang;\n        }\n    }\n    /**\n     * The lang currently used\n     * @type {string}\n     */\n    get currentLang() {\n        return this.isolate ? this._currentLang : this.store.currentLang;\n    }\n    set currentLang(currentLang) {\n        if (this.isolate) {\n            this._currentLang = currentLang;\n        }\n        else {\n            this.store.currentLang = currentLang;\n        }\n    }\n    /**\n     * an array of langs\n     * @type {Array}\n     */\n    get langs() {\n        return this.isolate ? this._langs : this.store.langs;\n    }\n    set langs(langs) {\n        if (this.isolate) {\n            this._langs = langs;\n        }\n        else {\n            this.store.langs = langs;\n        }\n    }\n    /**\n     * a list of translations per lang\n     * @type {{}}\n     */\n    get translations() {\n        return this.isolate ? this._translations : this.store.translations;\n    }\n    set translations(translations) {\n        if (this.isolate) {\n            this._translations = translations;\n        }\n        else {\n            this.store.translations = translations;\n        }\n    }\n    /**\n     * Sets the default language to use as a fallback\n     * @param lang\n     */\n    setDefaultLang(lang) {\n        if (lang === this.defaultLang) {\n            return;\n        }\n        let pending = this.retrieveTranslations(lang);\n        if (typeof pending !== \"undefined\") {\n            // on init set the defaultLang immediately\n            if (!this.defaultLang) {\n                this.defaultLang = lang;\n            }\n            pending.pipe(take$1(1))\n                .subscribe((res) => {\n                this.changeDefaultLang(lang);\n            });\n        }\n        else {\n            this.changeDefaultLang(lang);\n        }\n    }\n    /**\n     * Gets the default language used\n     * @returns string\n     */\n    getDefaultLang() {\n        return this.defaultLang;\n    }\n    /**\n     * Changes the lang currently used\n     * @param lang\n     * @returns {Observable<*>}\n     */\n    use(lang) {\n        // don't change the language if the language given is already selected\n        if (lang === this.currentLang) {\n            return of$1(this.translations[lang]);\n        }\n        let pending = this.retrieveTranslations(lang);\n        if (typeof pending !== \"undefined\") {\n            // on init set the currentLang immediately\n            if (!this.currentLang) {\n                this.currentLang = lang;\n            }\n            pending.pipe(take$1(1))\n                .subscribe((res) => {\n                this.changeLang(lang);\n            });\n            return pending;\n        }\n        else {\n            this.changeLang(lang);\n            return of$1(this.translations[lang]);\n        }\n    }\n    /**\n     * Retrieves the given translations\n     * @param lang\n     * @returns {Observable<*>}\n     */\n    retrieveTranslations(lang) {\n        let pending;\n        // if this language is unavailable, ask for it\n        if (typeof this.translations[lang] === \"undefined\") {\n            this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n            pending = this._translationRequests[lang];\n        }\n        return pending;\n    }\n    /**\n     * Gets an object of translations for a given language with the current loader\n     * and passes it through the compiler\n     * @param lang\n     * @returns {Observable<*>}\n     */\n    getTranslation(lang) {\n        this.pending = true;\n        this.loadingTranslations = this.currentLoader.getTranslation(lang).pipe(share$1());\n        this.loadingTranslations.pipe(take$1(1))\n            .subscribe((res) => {\n            this.translations[lang] = this.compiler.compileTranslations(res, lang);\n            this.updateLangs();\n            this.pending = false;\n        }, (err) => {\n            this.pending = false;\n        });\n        return this.loadingTranslations;\n    }\n    /**\n     * Manually sets an object of translations for a given language\n     * after passing it through the compiler\n     * @param lang\n     * @param translations\n     * @param shouldMerge\n     */\n    setTranslation(lang, translations, shouldMerge = false) {\n        translations = this.compiler.compileTranslations(translations, lang);\n        if (shouldMerge && this.translations[lang]) {\n            this.translations[lang] = mergeDeep(this.translations[lang], translations);\n        }\n        else {\n            this.translations[lang] = translations;\n        }\n        this.updateLangs();\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Returns an array of currently available langs\n     * @returns {any}\n     */\n    getLangs() {\n        return this.langs;\n    }\n    /**\n     * @param langs\n     * Add available langs\n     */\n    addLangs(langs) {\n        langs.forEach((lang) => {\n            if (this.langs.indexOf(lang) === -1) {\n                this.langs.push(lang);\n            }\n        });\n    }\n    /**\n     * Update the list of available langs\n     */\n    updateLangs() {\n        this.addLangs(Object.keys(this.translations));\n    }\n    /**\n     * Returns the parsed result of the translations\n     * @param translations\n     * @param key\n     * @param interpolateParams\n     * @returns {any}\n     */\n    getParsedResult(translations, key, interpolateParams) {\n        let res;\n        if (key instanceof Array) {\n            let result = {}, observables = false;\n            for (let k of key) {\n                result[k] = this.getParsedResult(translations, k, interpolateParams);\n                if (typeof result[k].subscribe === \"function\") {\n                    observables = true;\n                }\n            }\n            if (observables) {\n                let mergedObs;\n                for (let k of key) {\n                    let obs = typeof result[k].subscribe === \"function\" ? result[k] : of$1(result[k]);\n                    if (typeof mergedObs === \"undefined\") {\n                        mergedObs = obs;\n                    }\n                    else {\n                        mergedObs = mergedObs.pipe(merge$1(obs));\n                    }\n                }\n                return mergedObs.pipe(toArray$1(), map$1((arr) => {\n                    let obj = {};\n                    arr.forEach((value, index) => {\n                        obj[key[index]] = value;\n                    });\n                    return obj;\n                }));\n            }\n            return result;\n        }\n        if (translations) {\n            res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n        }\n        if (typeof res === \"undefined\" && this.defaultLang && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n            res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n        }\n        if (typeof res === \"undefined\") {\n            let params = { key, translateService: this };\n            if (typeof interpolateParams !== 'undefined') {\n                params.interpolateParams = interpolateParams;\n            }\n            res = this.missingTranslationHandler.handle(params);\n        }\n        return typeof res !== \"undefined\" ? res : key;\n    }\n    /**\n     * Gets the translated value of a key (or an array of keys)\n     * @param key\n     * @param interpolateParams\n     * @returns {any} the translated key, or an object of translated keys\n     */\n    get(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        // check if we are loading a new translation to use\n        if (this.pending) {\n            return Observable$1.create((observer) => {\n                let onComplete = (res) => {\n                    observer.next(res);\n                    observer.complete();\n                };\n                let onError = (err) => {\n                    observer.error(err);\n                };\n                this.loadingTranslations.subscribe((res) => {\n                    res = this.getParsedResult(this.compiler.compileTranslations(res, this.currentLang), key, interpolateParams);\n                    if (typeof res.subscribe === \"function\") {\n                        res.subscribe(onComplete, onError);\n                    }\n                    else {\n                        onComplete(res);\n                    }\n                }, onError);\n            });\n        }\n        else {\n            let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n            if (typeof res.subscribe === \"function\") {\n                return res;\n            }\n            else {\n                return of$1(res);\n            }\n        }\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the language changes.\n     * @param key\n     * @param interpolateParams\n     * @returns {any} A stream of the translated key, or an object of translated keys\n     */\n    stream(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        return this\n            .get(key, interpolateParams)\n            .pipe(concat_3(this.onLangChange.pipe(switchMap$1((event) => {\n            const res = this.getParsedResult(event.translations, key, interpolateParams);\n            if (typeof res.subscribe === \"function\") {\n                return res;\n            }\n            else {\n                return of$1(res);\n            }\n        }))));\n    }\n    /**\n     * Returns a translation instantly from the internal state of loaded translation.\n     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n     * @param key\n     * @param interpolateParams\n     * @returns {string}\n     */\n    instant(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n        if (typeof res.subscribe !== \"undefined\") {\n            if (key instanceof Array) {\n                let obj = {};\n                key.forEach((value, index) => {\n                    obj[key[index]] = key[index];\n                });\n                return obj;\n            }\n            return key;\n        }\n        else {\n            return res;\n        }\n    }\n    /**\n     * Sets the translated value of a key, after compiling it\n     * @param key\n     * @param value\n     * @param lang\n     */\n    set(key, value, lang = this.currentLang) {\n        this.translations[lang][key] = this.compiler.compile(value, lang);\n        this.updateLangs();\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Changes the current lang\n     * @param lang\n     */\n    changeLang(lang) {\n        this.currentLang = lang;\n        this.onLangChange.emit({ lang: lang, translations: this.translations[lang] });\n        // if there is no default lang, use the one that we just set\n        if (!this.defaultLang) {\n            this.changeDefaultLang(lang);\n        }\n    }\n    /**\n     * Changes the default lang\n     * @param lang\n     */\n    changeDefaultLang(lang) {\n        this.defaultLang = lang;\n        this.onDefaultLangChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Allows to reload the lang file from the file\n     * @param lang\n     * @returns {Observable<any>}\n     */\n    reloadLang(lang) {\n        this.resetLang(lang);\n        return this.getTranslation(lang);\n    }\n    /**\n     * Deletes inner translation\n     * @param lang\n     */\n    resetLang(lang) {\n        this._translationRequests[lang] = undefined;\n        this.translations[lang] = undefined;\n    }\n    /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     *\n     * @returns string\n     */\n    getBrowserLang() {\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n        let browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n        if (browserLang.indexOf('-') !== -1) {\n            browserLang = browserLang.split('-')[0];\n        }\n        if (browserLang.indexOf('_') !== -1) {\n            browserLang = browserLang.split('_')[0];\n        }\n        return browserLang;\n    }\n    /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     *\n     * @returns string\n     */\n    getBrowserCultureLang() {\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n        let browserCultureLang = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n        return browserCultureLang;\n    }\n};\nTranslateService.ɵfac = function TranslateService_Factory(t) { return new (t || TranslateService)(ɵngcc0.ɵɵinject(TranslateStore), ɵngcc0.ɵɵinject(TranslateLoader), ɵngcc0.ɵɵinject(TranslateCompiler), ɵngcc0.ɵɵinject(TranslateParser), ɵngcc0.ɵɵinject(MissingTranslationHandler), ɵngcc0.ɵɵinject(USE_DEFAULT_LANG), ɵngcc0.ɵɵinject(USE_STORE)); };\nTranslateService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TranslateService, factory: function (t) { return TranslateService.ɵfac(t); } });\nTranslateService = __decorate$2([ __param(5, Inject(USE_DEFAULT_LANG)),\n    __param(6, Inject(USE_STORE)),\n    __metadata(\"design:paramtypes\", [TranslateStore,\n        TranslateLoader,\n        TranslateCompiler,\n        TranslateParser,\n        MissingTranslationHandler, Boolean, Boolean])\n], TranslateService);\n\nvar __decorate$6 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$1 = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nlet TranslateDirective = class TranslateDirective {\n    constructor(translateService, element, _ref) {\n        this.translateService = translateService;\n        this.element = element;\n        this._ref = _ref;\n        // subscribe to onTranslationChange event, in case the translations of the current lang change\n        if (!this.onTranslationChangeSub) {\n            this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((event) => {\n                if (event.lang === this.translateService.currentLang) {\n                    this.checkNodes(true, event.translations);\n                }\n            });\n        }\n        // subscribe to onLangChange event, in case the language changes\n        if (!this.onLangChangeSub) {\n            this.onLangChangeSub = this.translateService.onLangChange.subscribe((event) => {\n                this.checkNodes(true, event.translations);\n            });\n        }\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if (!this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((event) => {\n                this.checkNodes(true);\n            });\n        }\n    }\n    set translate(key) {\n        if (key) {\n            this.key = key;\n            this.checkNodes();\n        }\n    }\n    set translateParams(params) {\n        if (!equals(this.currentParams, params)) {\n            this.currentParams = params;\n            this.checkNodes(true);\n        }\n    }\n    ngAfterViewChecked() {\n        this.checkNodes();\n    }\n    checkNodes(forceUpdate = false, translations) {\n        let nodes = this.element.nativeElement.childNodes;\n        // if the element is empty\n        if (!nodes.length) {\n            // we add the key as content\n            this.setContent(this.element.nativeElement, this.key);\n            nodes = this.element.nativeElement.childNodes;\n        }\n        for (let i = 0; i < nodes.length; ++i) {\n            let node = nodes[i];\n            if (node.nodeType === 3) {\n                let key;\n                if (this.key) {\n                    key = this.key;\n                    if (forceUpdate) {\n                        node.lastKey = null;\n                    }\n                }\n                else {\n                    let content = this.getContent(node).trim();\n                    if (content.length) {\n                        // we want to use the content as a key, not the translation value\n                        if (content !== node.currentValue) {\n                            key = content;\n                            // the content was changed from the user, we'll use it as a reference if needed\n                            node.originalContent = this.getContent(node);\n                        }\n                        else if (node.originalContent && forceUpdate) {\n                            node.lastKey = null;\n                            // the current content is the translation, not the key, use the last real content as key\n                            key = node.originalContent.trim();\n                        }\n                    }\n                }\n                this.updateValue(key, node, translations);\n            }\n        }\n    }\n    updateValue(key, node, translations) {\n        if (key) {\n            if (node.lastKey === key && this.lastParams === this.currentParams) {\n                return;\n            }\n            this.lastParams = this.currentParams;\n            let onTranslation = (res) => {\n                if (res !== key) {\n                    node.lastKey = key;\n                }\n                if (!node.originalContent) {\n                    node.originalContent = this.getContent(node);\n                }\n                node.currentValue = isDefined(res) ? res : (node.originalContent || key);\n                // we replace in the original content to preserve spaces that we might have trimmed\n                this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n                this._ref.markForCheck();\n            };\n            if (isDefined(translations)) {\n                let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n                if (typeof res.subscribe === \"function\") {\n                    res.subscribe(onTranslation);\n                }\n                else {\n                    onTranslation(res);\n                }\n            }\n            else {\n                this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n            }\n        }\n    }\n    getContent(node) {\n        return isDefined(node.textContent) ? node.textContent : node.data;\n    }\n    setContent(node, content) {\n        if (isDefined(node.textContent)) {\n            node.textContent = content;\n        }\n        else {\n            node.data = content;\n        }\n    }\n    ngOnDestroy() {\n        if (this.onLangChangeSub) {\n            this.onLangChangeSub.unsubscribe();\n        }\n        if (this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub.unsubscribe();\n        }\n        if (this.onTranslationChangeSub) {\n            this.onTranslationChangeSub.unsubscribe();\n        }\n    }\n};\nTranslateDirective.ɵfac = function TranslateDirective_Factory(t) { return new (t || TranslateDirective)(ɵngcc0.ɵɵdirectiveInject(TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nTranslateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: TranslateDirective, selectors: [[\"\", \"translate\", \"\"], [\"\", \"ngx-translate\", \"\"]], inputs: { translate: \"translate\", translateParams: \"translateParams\" } });\n__decorate$6([\n    Input(),\n    __metadata$1(\"design:type\", String),\n    __metadata$1(\"design:paramtypes\", [String])\n], TranslateDirective.prototype, \"translate\", null);\n__decorate$6([\n    Input(),\n    __metadata$1(\"design:type\", Object),\n    __metadata$1(\"design:paramtypes\", [Object])\n], TranslateDirective.prototype, \"translateParams\", null);\nTranslateDirective = __decorate$6([ __metadata$1(\"design:paramtypes\", [TranslateService, ElementRef, ChangeDetectorRef])\n], TranslateDirective);\n\nvar __decorate$7 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$2 = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nlet TranslatePipe = class TranslatePipe {\n    constructor(translate, _ref) {\n        this.translate = translate;\n        this._ref = _ref;\n        this.value = '';\n    }\n    updateValue(key, interpolateParams, translations) {\n        let onTranslation = (res) => {\n            this.value = res !== undefined ? res : key;\n            this.lastKey = key;\n            this._ref.markForCheck();\n        };\n        if (translations) {\n            let res = this.translate.getParsedResult(translations, key, interpolateParams);\n            if (typeof res.subscribe === 'function') {\n                res.subscribe(onTranslation);\n            }\n            else {\n                onTranslation(res);\n            }\n        }\n        this.translate.get(key, interpolateParams).subscribe(onTranslation);\n    }\n    transform(query, ...args) {\n        if (!query || query.length === 0) {\n            return query;\n        }\n        // if we ask another time for the same key, return the last value\n        if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n            return this.value;\n        }\n        let interpolateParams;\n        if (isDefined(args[0]) && args.length) {\n            if (typeof args[0] === 'string' && args[0].length) {\n                // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n                // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n                let validArgs = args[0]\n                    .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\n                    .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n                try {\n                    interpolateParams = JSON.parse(validArgs);\n                }\n                catch (e) {\n                    throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n                }\n            }\n            else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n                interpolateParams = args[0];\n            }\n        }\n        // store the query, in case it changes\n        this.lastKey = query;\n        // store the params, in case they change\n        this.lastParams = args;\n        // set the value\n        this.updateValue(query, interpolateParams);\n        // if there is a subscription to onLangChange, clean it\n        this._dispose();\n        // subscribe to onTranslationChange event, in case the translations change\n        if (!this.onTranslationChange) {\n            this.onTranslationChange = this.translate.onTranslationChange.subscribe((event) => {\n                if (this.lastKey && event.lang === this.translate.currentLang) {\n                    this.lastKey = null;\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n        // subscribe to onLangChange event, in case the language changes\n        if (!this.onLangChange) {\n            this.onLangChange = this.translate.onLangChange.subscribe((event) => {\n                if (this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if (!this.onDefaultLangChange) {\n            this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n                if (this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams);\n                }\n            });\n        }\n        return this.value;\n    }\n    /**\n     * Clean any existing subscription to change events\n     * @private\n     */\n    _dispose() {\n        if (typeof this.onTranslationChange !== 'undefined') {\n            this.onTranslationChange.unsubscribe();\n            this.onTranslationChange = undefined;\n        }\n        if (typeof this.onLangChange !== 'undefined') {\n            this.onLangChange.unsubscribe();\n            this.onLangChange = undefined;\n        }\n        if (typeof this.onDefaultLangChange !== 'undefined') {\n            this.onDefaultLangChange.unsubscribe();\n            this.onDefaultLangChange = undefined;\n        }\n    }\n    ngOnDestroy() {\n        this._dispose();\n    }\n};\nTranslatePipe.ɵfac = function TranslatePipe_Factory(t) { return new (t || TranslatePipe)(ɵngcc0.ɵɵdirectiveInject(TranslateService, 16), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef, 16)); };\nTranslatePipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: \"translate\", type: TranslatePipe, pure: false });\nTranslatePipe.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TranslatePipe, factory: function (t) { return TranslatePipe.ɵfac(t); } });\nTranslatePipe = __decorate$7([ __metadata$2(\"design:paramtypes\", [TranslateService, ChangeDetectorRef])\n], TranslatePipe);\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet TranslateModule = TranslateModule_1 = class TranslateModule {\n    /**\n     * Use this method in your root module to provide the TranslateService\n     * @param {TranslateModuleConfig} config\n     * @returns {ModuleWithProviders}\n     */\n    static forRoot(config = {}) {\n        return {\n            ngModule: TranslateModule_1,\n            providers: [\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\n                TranslateStore,\n                { provide: USE_STORE, useValue: config.isolate },\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\n                TranslateService\n            ]\n        };\n    }\n    /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     * @param {TranslateModuleConfig} config\n     * @returns {ModuleWithProviders}\n     */\n    static forChild(config = {}) {\n        return {\n            ngModule: TranslateModule_1,\n            providers: [\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\n                { provide: USE_STORE, useValue: config.isolate },\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\n                TranslateService\n            ]\n        };\n    }\n};\nTranslateModule.ɵfac = function TranslateModule_Factory(t) { return new (t || TranslateModule)(); };\nTranslateModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TranslateModule });\nTranslateModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TranslateFakeLoader, [{\n        type: Injectable\n    }], null, null); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FakeMissingTranslationHandler, [{\n        type: Injectable\n    }], null, null); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TranslateFakeCompiler, [{\n        type: Injectable\n    }], null, null); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TranslateDefaultParser, [{\n        type: Injectable\n    }], null, null); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TranslateService, [{\n        type: Injectable\n    }], function () { return [{ type: TranslateStore }, { type: TranslateLoader }, { type: TranslateCompiler }, { type: TranslateParser }, { type: MissingTranslationHandler }, { type: Boolean, decorators: [{\n                type: Inject,\n                args: [USE_DEFAULT_LANG]\n            }] }, { type: Boolean, decorators: [{\n                type: Inject,\n                args: [USE_STORE]\n            }] }]; }, null); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TranslateDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[translate],[ngx-translate]'\n            }]\n    }], function () { return [{ type: TranslateService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }]; }, { translate: [{\n            type: Input\n        }], translateParams: [{\n            type: Input\n        }] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TranslatePipe, [{\n        type: Injectable\n    }, {\n        type: Pipe,\n        args: [{\n                name: 'translate',\n                pure: false // required to update the value when the promise is resolved\n            }]\n    }], function () { return [{ type: TranslateService }, { type: ɵngcc0.ChangeDetectorRef }]; }, null); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TranslateModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    TranslatePipe,\n                    TranslateDirective\n                ],\n                exports: [\n                    TranslatePipe,\n                    TranslateDirective\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TranslateModule, { declarations: [TranslatePipe, TranslateDirective], exports: [TranslatePipe, TranslateDirective] }); })();\nvar TranslateModule_1;\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TranslateStore as ɵa, TranslateModule, TranslateLoader, TranslateFakeLoader, USE_STORE, USE_DEFAULT_LANG, TranslateService, MissingTranslationHandler, FakeMissingTranslationHandler, TranslateParser, TranslateDefaultParser, TranslateCompiler, TranslateFakeCompiler, TranslateDirective, TranslatePipe };\n\n"]},"metadata":{},"sourceType":"module"}